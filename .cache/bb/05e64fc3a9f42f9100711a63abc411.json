{"id":"../node_modules/nedb/lib/datastore.js","dependencies":[{"name":"/Users/reidbrown/react-bootcamp/TestTask/package.json","includedInParent":true,"mtime":1592783413663},{"name":"/Users/reidbrown/react-bootcamp/TestTask/.babelrc","includedInParent":true,"mtime":1589062941327},{"name":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/package.json","includedInParent":true,"mtime":1592783413306},{"name":"./customUtils","loc":{"line":1,"column":26},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/browser-version/browser-specific/lib/customUtils.js"},{"name":"./model","loc":{"line":2,"column":20},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/model.js"},{"name":"async","loc":{"line":3,"column":20},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/async/lib/async.js"},{"name":"./executor","loc":{"line":4,"column":23},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/executor.js"},{"name":"./indexes","loc":{"line":5,"column":20},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/indexes.js"},{"name":"util","loc":{"line":6,"column":19},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/util/util.js"},{"name":"underscore","loc":{"line":7,"column":16},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/underscore/underscore.js"},{"name":"./persistence","loc":{"line":8,"column":26},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/persistence.js"},{"name":"./cursor","loc":{"line":9,"column":21},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/cursor.js"},{"name":"events","loc":{"line":81,"column":33},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/datastore.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/events/events.js"}],"generated":{"js":"var customUtils = require('./customUtils')\n  , model = require('./model')\n  , async = require('async')\n  , Executor = require('./executor')\n  , Index = require('./indexes')\n  , util = require('util')\n  , _ = require('underscore')\n  , Persistence = require('./persistence')\n  , Cursor = require('./cursor')\n  ;\n\n\n/**\n * Create a new collection\n * @param {String} options.filename Optional, datastore will be in-memory only if not provided\n * @param {Boolean} options.timestampData Optional, defaults to false. If set to true, createdAt and updatedAt will be created and populated automatically (if not specified by user)\n * @param {Boolean} options.inMemoryOnly Optional, defaults to false\n * @param {String} options.nodeWebkitAppName Optional, specify the name of your NW app if you want options.filename to be relative to the directory where\n *                                            Node Webkit stores application data such as cookies and local storage (the best place to store data in my opinion)\n * @param {Boolean} options.autoload Optional, defaults to false\n * @param {Function} options.onload Optional, if autoload is used this will be called after the load database with the error object as parameter. If you don't pass it the error will be thrown\n * @param {Function} options.afterSerialization/options.beforeDeserialization Optional, serialization hooks\n * @param {Number} options.corruptAlertThreshold Optional, threshold after which an alert is thrown if too much data is corrupt\n * @param {Function} options.compareStrings Optional, string comparison function that overrides default for sorting\n *\n * Event Emitter - Events\n * * compaction.done - Fired whenever a compaction operation was finished\n */\nfunction Datastore (options) {\n  var filename;\n\n  // Retrocompatibility with v0.6 and before\n  if (typeof options === 'string') {\n    filename = options;\n    this.inMemoryOnly = false;   // Default\n  } else {\n    options = options || {};\n    filename = options.filename;\n    this.inMemoryOnly = options.inMemoryOnly || false;\n    this.autoload = options.autoload || false;\n    this.timestampData = options.timestampData || false;\n  }\n\n  // Determine whether in memory or persistent\n  if (!filename || typeof filename !== 'string' || filename.length === 0) {\n    this.filename = null;\n    this.inMemoryOnly = true;\n  } else {\n    this.filename = filename;\n  }\n\n  // String comparison function\n  this.compareStrings = options.compareStrings;\n\n  // Persistence handling\n  this.persistence = new Persistence({ db: this, nodeWebkitAppName: options.nodeWebkitAppName\n                                      , afterSerialization: options.afterSerialization\n                                      , beforeDeserialization: options.beforeDeserialization\n                                      , corruptAlertThreshold: options.corruptAlertThreshold\n                                      });\n\n  // This new executor is ready if we don't use persistence\n  // If we do, it will only be ready once loadDatabase is called\n  this.executor = new Executor();\n  if (this.inMemoryOnly) { this.executor.ready = true; }\n\n  // Indexed by field name, dot notation can be used\n  // _id is always indexed and since _ids are generated randomly the underlying\n  // binary is always well-balanced\n  this.indexes = {};\n  this.indexes._id = new Index({ fieldName: '_id', unique: true });\n  this.ttlIndexes = {};\n\n  // Queue a load of the database right away and call the onload handler\n  // By default (no onload handler), if there is an error there, no operation will be possible so warn the user by throwing an exception\n  if (this.autoload) { this.loadDatabase(options.onload || function (err) {\n    if (err) { throw err; }\n  }); }\n}\n\nutil.inherits(Datastore, require('events').EventEmitter);\n\n\n/**\n * Load the database from the datafile, and trigger the execution of buffered commands if any\n */\nDatastore.prototype.loadDatabase = function () {\n  this.executor.push({ this: this.persistence, fn: this.persistence.loadDatabase, arguments: arguments }, true);\n};\n\n\n/**\n * Get an array of all the data in the database\n */\nDatastore.prototype.getAllData = function () {\n  return this.indexes._id.getAll();\n};\n\n\n/**\n * Reset all currently defined indexes\n */\nDatastore.prototype.resetIndexes = function (newData) {\n  var self = this;\n\n  Object.keys(this.indexes).forEach(function (i) {\n    self.indexes[i].reset(newData);\n  });\n};\n\n\n/**\n * Ensure an index is kept for this field. Same parameters as lib/indexes\n * For now this function is synchronous, we need to test how much time it takes\n * We use an async API for consistency with the rest of the code\n * @param {String} options.fieldName\n * @param {Boolean} options.unique\n * @param {Boolean} options.sparse\n * @param {Number} options.expireAfterSeconds - Optional, if set this index becomes a TTL index (only works on Date fields, not arrays of Date)\n * @param {Function} cb Optional callback, signature: err\n */\nDatastore.prototype.ensureIndex = function (options, cb) {\n  var err\n    , callback = cb || function () {};\n\n  options = options || {};\n\n  if (!options.fieldName) {\n    err = new Error(\"Cannot create an index without a fieldName\");\n    err.missingFieldName = true;\n    return callback(err);\n  }\n  if (this.indexes[options.fieldName]) { return callback(null); }\n\n  this.indexes[options.fieldName] = new Index(options);\n  if (options.expireAfterSeconds !== undefined) { this.ttlIndexes[options.fieldName] = options.expireAfterSeconds; }   // With this implementation index creation is not necessary to ensure TTL but we stick with MongoDB's API here\n\n  try {\n    this.indexes[options.fieldName].insert(this.getAllData());\n  } catch (e) {\n    delete this.indexes[options.fieldName];\n    return callback(e);\n  }\n\n  // We may want to force all options to be persisted including defaults, not just the ones passed the index creation function\n  this.persistence.persistNewState([{ $$indexCreated: options }], function (err) {\n    if (err) { return callback(err); }\n    return callback(null);\n  });\n};\n\n\n/**\n * Remove an index\n * @param {String} fieldName\n * @param {Function} cb Optional callback, signature: err\n */\nDatastore.prototype.removeIndex = function (fieldName, cb) {\n  var callback = cb || function () {};\n\n  delete this.indexes[fieldName];\n\n  this.persistence.persistNewState([{ $$indexRemoved: fieldName }], function (err) {\n    if (err) { return callback(err); }\n    return callback(null);\n  });\n};\n\n\n/**\n * Add one or several document(s) to all indexes\n */\nDatastore.prototype.addToIndexes = function (doc) {\n  var i, failingIndex, error\n    , keys = Object.keys(this.indexes)\n    ;\n\n  for (i = 0; i < keys.length; i += 1) {\n    try {\n      this.indexes[keys[i]].insert(doc);\n    } catch (e) {\n      failingIndex = i;\n      error = e;\n      break;\n    }\n  }\n\n  // If an error happened, we need to rollback the insert on all other indexes\n  if (error) {\n    for (i = 0; i < failingIndex; i += 1) {\n      this.indexes[keys[i]].remove(doc);\n    }\n\n    throw error;\n  }\n};\n\n\n/**\n * Remove one or several document(s) from all indexes\n */\nDatastore.prototype.removeFromIndexes = function (doc) {\n  var self = this;\n\n  Object.keys(this.indexes).forEach(function (i) {\n    self.indexes[i].remove(doc);\n  });\n};\n\n\n/**\n * Update one or several documents in all indexes\n * To update multiple documents, oldDoc must be an array of { oldDoc, newDoc } pairs\n * If one update violates a constraint, all changes are rolled back\n */\nDatastore.prototype.updateIndexes = function (oldDoc, newDoc) {\n  var i, failingIndex, error\n    , keys = Object.keys(this.indexes)\n    ;\n\n  for (i = 0; i < keys.length; i += 1) {\n    try {\n      this.indexes[keys[i]].update(oldDoc, newDoc);\n    } catch (e) {\n      failingIndex = i;\n      error = e;\n      break;\n    }\n  }\n\n  // If an error happened, we need to rollback the update on all other indexes\n  if (error) {\n    for (i = 0; i < failingIndex; i += 1) {\n      this.indexes[keys[i]].revertUpdate(oldDoc, newDoc);\n    }\n\n    throw error;\n  }\n};\n\n\n/**\n * Return the list of candidates for a given query\n * Crude implementation for now, we return the candidates given by the first usable index if any\n * We try the following query types, in this order: basic match, $in match, comparison match\n * One way to make it better would be to enable the use of multiple indexes if the first usable index\n * returns too much data. I may do it in the future.\n *\n * Returned candidates will be scanned to find and remove all expired documents\n *\n * @param {Query} query\n * @param {Boolean} dontExpireStaleDocs Optional, defaults to false, if true don't remove stale docs. Useful for the remove function which shouldn't be impacted by expirations\n * @param {Function} callback Signature err, docs\n */\nDatastore.prototype.getCandidates = function (query, dontExpireStaleDocs, callback) {\n  var indexNames = Object.keys(this.indexes)\n    , self = this\n    , usableQueryKeys;\n\n  if (typeof dontExpireStaleDocs === 'function') {\n    callback = dontExpireStaleDocs;\n    dontExpireStaleDocs = false;\n  }\n\n  async.waterfall([\n  // STEP 1: get candidates list by checking indexes from most to least frequent usecase\n  function (cb) {\n    // For a basic match\n    usableQueryKeys = [];\n    Object.keys(query).forEach(function (k) {\n      if (typeof query[k] === 'string' || typeof query[k] === 'number' || typeof query[k] === 'boolean' || util.isDate(query[k]) || query[k] === null) {\n        usableQueryKeys.push(k);\n      }\n    });\n    usableQueryKeys = _.intersection(usableQueryKeys, indexNames);\n    if (usableQueryKeys.length > 0) {\n      return cb(null, self.indexes[usableQueryKeys[0]].getMatching(query[usableQueryKeys[0]]));\n    }\n\n    // For a $in match\n    usableQueryKeys = [];\n    Object.keys(query).forEach(function (k) {\n      if (query[k] && query[k].hasOwnProperty('$in')) {\n        usableQueryKeys.push(k);\n      }\n    });\n    usableQueryKeys = _.intersection(usableQueryKeys, indexNames);\n    if (usableQueryKeys.length > 0) {\n      return cb(null, self.indexes[usableQueryKeys[0]].getMatching(query[usableQueryKeys[0]].$in));\n    }\n\n    // For a comparison match\n    usableQueryKeys = [];\n    Object.keys(query).forEach(function (k) {\n      if (query[k] && (query[k].hasOwnProperty('$lt') || query[k].hasOwnProperty('$lte') || query[k].hasOwnProperty('$gt') || query[k].hasOwnProperty('$gte'))) {\n        usableQueryKeys.push(k);\n      }\n    });\n    usableQueryKeys = _.intersection(usableQueryKeys, indexNames);\n    if (usableQueryKeys.length > 0) {\n      return cb(null, self.indexes[usableQueryKeys[0]].getBetweenBounds(query[usableQueryKeys[0]]));\n    }\n\n    // By default, return all the DB data\n    return cb(null, self.getAllData());\n  }\n  // STEP 2: remove all expired documents\n  , function (docs) {\n    if (dontExpireStaleDocs) { return callback(null, docs); }\n\n    var expiredDocsIds = [], validDocs = [], ttlIndexesFieldNames = Object.keys(self.ttlIndexes);\n\n    docs.forEach(function (doc) {\n      var valid = true;\n      ttlIndexesFieldNames.forEach(function (i) {\n        if (doc[i] !== undefined && util.isDate(doc[i]) && Date.now() > doc[i].getTime() + self.ttlIndexes[i] * 1000) {\n          valid = false;\n        }\n      });\n      if (valid) { validDocs.push(doc); } else { expiredDocsIds.push(doc._id); }\n    });\n\n    async.eachSeries(expiredDocsIds, function (_id, cb) {\n      self._remove({ _id: _id }, {}, function (err) {\n        if (err) { return callback(err); }\n        return cb();\n      });\n    }, function (err) {\n      return callback(null, validDocs);\n    });\n  }]);\n};\n\n\n/**\n * Insert a new document\n * @param {Function} cb Optional callback, signature: err, insertedDoc\n *\n * @api private Use Datastore.insert which has the same signature\n */\nDatastore.prototype._insert = function (newDoc, cb) {\n  var callback = cb || function () {}\n    , preparedDoc\n    ;\n\n  try {\n    preparedDoc = this.prepareDocumentForInsertion(newDoc)\n    this._insertInCache(preparedDoc);\n  } catch (e) {\n    return callback(e);\n  }\n\n  this.persistence.persistNewState(util.isArray(preparedDoc) ? preparedDoc : [preparedDoc], function (err) {\n    if (err) { return callback(err); }\n    return callback(null, model.deepCopy(preparedDoc));\n  });\n};\n\n/**\n * Create a new _id that's not already in use\n */\nDatastore.prototype.createNewId = function () {\n  var tentativeId = customUtils.uid(16);\n  // Try as many times as needed to get an unused _id. As explained in customUtils, the probability of this ever happening is extremely small, so this is O(1)\n  if (this.indexes._id.getMatching(tentativeId).length > 0) {\n    tentativeId = this.createNewId();\n  }\n  return tentativeId;\n};\n\n/**\n * Prepare a document (or array of documents) to be inserted in a database\n * Meaning adds _id and timestamps if necessary on a copy of newDoc to avoid any side effect on user input\n * @api private\n */\nDatastore.prototype.prepareDocumentForInsertion = function (newDoc) {\n  var preparedDoc, self = this;\n\n  if (util.isArray(newDoc)) {\n    preparedDoc = [];\n    newDoc.forEach(function (doc) { preparedDoc.push(self.prepareDocumentForInsertion(doc)); });\n  } else {\n    preparedDoc = model.deepCopy(newDoc);\n    if (preparedDoc._id === undefined) { preparedDoc._id = this.createNewId(); }\n    var now = new Date();\n    if (this.timestampData && preparedDoc.createdAt === undefined) { preparedDoc.createdAt = now; }\n    if (this.timestampData && preparedDoc.updatedAt === undefined) { preparedDoc.updatedAt = now; }\n    model.checkObject(preparedDoc);\n  }\n\n  return preparedDoc;\n};\n\n/**\n * If newDoc is an array of documents, this will insert all documents in the cache\n * @api private\n */\nDatastore.prototype._insertInCache = function (preparedDoc) {\n  if (util.isArray(preparedDoc)) {\n    this._insertMultipleDocsInCache(preparedDoc);\n  } else {\n    this.addToIndexes(preparedDoc);\n  }\n};\n\n/**\n * If one insertion fails (e.g. because of a unique constraint), roll back all previous\n * inserts and throws the error\n * @api private\n */\nDatastore.prototype._insertMultipleDocsInCache = function (preparedDocs) {\n  var i, failingI, error;\n\n  for (i = 0; i < preparedDocs.length; i += 1) {\n    try {\n      this.addToIndexes(preparedDocs[i]);\n    } catch (e) {\n      error = e;\n      failingI = i;\n      break;\n    }\n  }\n\n  if (error) {\n    for (i = 0; i < failingI; i += 1) {\n      this.removeFromIndexes(preparedDocs[i]);\n    }\n\n    throw error;\n  }\n};\n\nDatastore.prototype.insert = function () {\n  this.executor.push({ this: this, fn: this._insert, arguments: arguments });\n};\n\n\n/**\n * Count all documents matching the query\n * @param {Object} query MongoDB-style query\n */\nDatastore.prototype.count = function(query, callback) {\n  var cursor = new Cursor(this, query, function(err, docs, callback) {\n    if (err) { return callback(err); }\n    return callback(null, docs.length);\n  });\n\n  if (typeof callback === 'function') {\n    cursor.exec(callback);\n  } else {\n    return cursor;\n  }\n};\n\n\n/**\n * Find all documents matching the query\n * If no callback is passed, we return the cursor so that user can limit, skip and finally exec\n * @param {Object} query MongoDB-style query\n * @param {Object} projection MongoDB-style projection\n */\nDatastore.prototype.find = function (query, projection, callback) {\n  switch (arguments.length) {\n    case 1:\n      projection = {};\n      // callback is undefined, will return a cursor\n      break;\n    case 2:\n      if (typeof projection === 'function') {\n        callback = projection;\n        projection = {};\n      }   // If not assume projection is an object and callback undefined\n      break;\n  }\n\n  var cursor = new Cursor(this, query, function(err, docs, callback) {\n    var res = [], i;\n\n    if (err) { return callback(err); }\n\n    for (i = 0; i < docs.length; i += 1) {\n      res.push(model.deepCopy(docs[i]));\n    }\n    return callback(null, res);\n  });\n\n  cursor.projection(projection);\n  if (typeof callback === 'function') {\n    cursor.exec(callback);\n  } else {\n    return cursor;\n  }\n};\n\n\n/**\n * Find one document matching the query\n * @param {Object} query MongoDB-style query\n * @param {Object} projection MongoDB-style projection\n */\nDatastore.prototype.findOne = function (query, projection, callback) {\n  switch (arguments.length) {\n    case 1:\n      projection = {};\n      // callback is undefined, will return a cursor\n      break;\n    case 2:\n      if (typeof projection === 'function') {\n        callback = projection;\n        projection = {};\n      }   // If not assume projection is an object and callback undefined\n      break;\n  }\n\n  var cursor = new Cursor(this, query, function(err, docs, callback) {\n    if (err) { return callback(err); }\n    if (docs.length === 1) {\n      return callback(null, model.deepCopy(docs[0]));\n    } else {\n      return callback(null, null);\n    }\n  });\n\n  cursor.projection(projection).limit(1);\n  if (typeof callback === 'function') {\n    cursor.exec(callback);\n  } else {\n    return cursor;\n  }\n};\n\n\n/**\n * Update all docs matching query\n * @param {Object} query\n * @param {Object} updateQuery\n * @param {Object} options Optional options\n *                 options.multi If true, can update multiple documents (defaults to false)\n *                 options.upsert If true, document is inserted if the query doesn't match anything\n *                 options.returnUpdatedDocs Defaults to false, if true return as third argument the array of updated matched documents (even if no change actually took place)\n * @param {Function} cb Optional callback, signature: (err, numAffected, affectedDocuments, upsert)\n *                      If update was an upsert, upsert flag is set to true\n *                      affectedDocuments can be one of the following:\n *                        * For an upsert, the upserted document\n *                        * For an update with returnUpdatedDocs option false, null\n *                        * For an update with returnUpdatedDocs true and multi false, the updated document\n *                        * For an update with returnUpdatedDocs true and multi true, the array of updated documents\n *\n * WARNING: The API was changed between v1.7.4 and v1.8, for consistency and readability reasons. Prior and including to v1.7.4,\n *          the callback signature was (err, numAffected, updated) where updated was the updated document in case of an upsert\n *          or the array of updated documents for an update if the returnUpdatedDocs option was true. That meant that the type of\n *          affectedDocuments in a non multi update depended on whether there was an upsert or not, leaving only two ways for the\n *          user to check whether an upsert had occured: checking the type of affectedDocuments or running another find query on\n *          the whole dataset to check its size. Both options being ugly, the breaking change was necessary.\n *\n * @api private Use Datastore.update which has the same signature\n */\nDatastore.prototype._update = function (query, updateQuery, options, cb) {\n  var callback\n    , self = this\n    , numReplaced = 0\n    , multi, upsert\n    , i\n    ;\n\n  if (typeof options === 'function') { cb = options; options = {}; }\n  callback = cb || function () {};\n  multi = options.multi !== undefined ? options.multi : false;\n  upsert = options.upsert !== undefined ? options.upsert : false;\n\n  async.waterfall([\n  function (cb) {   // If upsert option is set, check whether we need to insert the doc\n    if (!upsert) { return cb(); }\n\n    // Need to use an internal function not tied to the executor to avoid deadlock\n    var cursor = new Cursor(self, query);\n    cursor.limit(1)._exec(function (err, docs) {\n      if (err) { return callback(err); }\n      if (docs.length === 1) {\n        return cb();\n      } else {\n        var toBeInserted;\n\n        try {\n          model.checkObject(updateQuery);\n          // updateQuery is a simple object with no modifier, use it as the document to insert\n          toBeInserted = updateQuery;\n        } catch (e) {\n          // updateQuery contains modifiers, use the find query as the base,\n          // strip it from all operators and update it according to updateQuery\n          try {\n            toBeInserted = model.modify(model.deepCopy(query, true), updateQuery);\n          } catch (err) {\n            return callback(err);\n          }\n        }\n\n        return self._insert(toBeInserted, function (err, newDoc) {\n          if (err) { return callback(err); }\n          return callback(null, 1, newDoc, true);\n        });\n      }\n    });\n  }\n  , function () {   // Perform the update\n    var modifiedDoc , modifications = [], createdAt;\n\n    self.getCandidates(query, function (err, candidates) {\n      if (err) { return callback(err); }\n\n      // Preparing update (if an error is thrown here neither the datafile nor\n      // the in-memory indexes are affected)\n      try {\n        for (i = 0; i < candidates.length; i += 1) {\n          if (model.match(candidates[i], query) && (multi || numReplaced === 0)) {\n            numReplaced += 1;\n            if (self.timestampData) { createdAt = candidates[i].createdAt; }\n            modifiedDoc = model.modify(candidates[i], updateQuery);\n            if (self.timestampData) {\n              modifiedDoc.createdAt = createdAt;\n              modifiedDoc.updatedAt = new Date();\n            }\n            modifications.push({ oldDoc: candidates[i], newDoc: modifiedDoc });\n          }\n        }\n      } catch (err) {\n        return callback(err);\n      }\n\n      // Change the docs in memory\n      try {\n        self.updateIndexes(modifications);\n      } catch (err) {\n        return callback(err);\n      }\n\n      // Update the datafile\n      var updatedDocs = _.pluck(modifications, 'newDoc');\n      self.persistence.persistNewState(updatedDocs, function (err) {\n        if (err) { return callback(err); }\n        if (!options.returnUpdatedDocs) {\n          return callback(null, numReplaced);\n        } else {\n          var updatedDocsDC = [];\n          updatedDocs.forEach(function (doc) { updatedDocsDC.push(model.deepCopy(doc)); });\n          if (! multi) { updatedDocsDC = updatedDocsDC[0]; }\n          return callback(null, numReplaced, updatedDocsDC);\n        }\n      });\n    });\n  }]);\n};\n\nDatastore.prototype.update = function () {\n  this.executor.push({ this: this, fn: this._update, arguments: arguments });\n};\n\n\n/**\n * Remove all docs matching the query\n * For now very naive implementation (similar to update)\n * @param {Object} query\n * @param {Object} options Optional options\n *                 options.multi If true, can update multiple documents (defaults to false)\n * @param {Function} cb Optional callback, signature: err, numRemoved\n *\n * @api private Use Datastore.remove which has the same signature\n */\nDatastore.prototype._remove = function (query, options, cb) {\n  var callback\n    , self = this, numRemoved = 0, removedDocs = [], multi\n    ;\n\n  if (typeof options === 'function') { cb = options; options = {}; }\n  callback = cb || function () {};\n  multi = options.multi !== undefined ? options.multi : false;\n\n  this.getCandidates(query, true, function (err, candidates) {\n    if (err) { return callback(err); }\n\n    try {\n      candidates.forEach(function (d) {\n        if (model.match(d, query) && (multi || numRemoved === 0)) {\n          numRemoved += 1;\n          removedDocs.push({ $$deleted: true, _id: d._id });\n          self.removeFromIndexes(d);\n        }\n      });\n    } catch (err) { return callback(err); }\n\n    self.persistence.persistNewState(removedDocs, function (err) {\n      if (err) { return callback(err); }\n      return callback(null, numRemoved);\n    });\n  });\n};\n\nDatastore.prototype.remove = function () {\n  this.executor.push({ this: this, fn: this._remove, arguments: arguments });\n};\n\n\n\nmodule.exports = Datastore;\n","map":{"mappings":[{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/nedb/lib/datastore.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}}],"sources":{"../node_modules/nedb/lib/datastore.js":"var customUtils = require('./customUtils')\n  , model = require('./model')\n  , async = require('async')\n  , Executor = require('./executor')\n  , Index = require('./indexes')\n  , util = require('util')\n  , _ = require('underscore')\n  , Persistence = require('./persistence')\n  , Cursor = require('./cursor')\n  ;\n\n\n/**\n * Create a new collection\n * @param {String} options.filename Optional, datastore will be in-memory only if not provided\n * @param {Boolean} options.timestampData Optional, defaults to false. If set to true, createdAt and updatedAt will be created and populated automatically (if not specified by user)\n * @param {Boolean} options.inMemoryOnly Optional, defaults to false\n * @param {String} options.nodeWebkitAppName Optional, specify the name of your NW app if you want options.filename to be relative to the directory where\n *                                            Node Webkit stores application data such as cookies and local storage (the best place to store data in my opinion)\n * @param {Boolean} options.autoload Optional, defaults to false\n * @param {Function} options.onload Optional, if autoload is used this will be called after the load database with the error object as parameter. If you don't pass it the error will be thrown\n * @param {Function} options.afterSerialization/options.beforeDeserialization Optional, serialization hooks\n * @param {Number} options.corruptAlertThreshold Optional, threshold after which an alert is thrown if too much data is corrupt\n * @param {Function} options.compareStrings Optional, string comparison function that overrides default for sorting\n *\n * Event Emitter - Events\n * * compaction.done - Fired whenever a compaction operation was finished\n */\nfunction Datastore (options) {\n  var filename;\n\n  // Retrocompatibility with v0.6 and before\n  if (typeof options === 'string') {\n    filename = options;\n    this.inMemoryOnly = false;   // Default\n  } else {\n    options = options || {};\n    filename = options.filename;\n    this.inMemoryOnly = options.inMemoryOnly || false;\n    this.autoload = options.autoload || false;\n    this.timestampData = options.timestampData || false;\n  }\n\n  // Determine whether in memory or persistent\n  if (!filename || typeof filename !== 'string' || filename.length === 0) {\n    this.filename = null;\n    this.inMemoryOnly = true;\n  } else {\n    this.filename = filename;\n  }\n\n  // String comparison function\n  this.compareStrings = options.compareStrings;\n\n  // Persistence handling\n  this.persistence = new Persistence({ db: this, nodeWebkitAppName: options.nodeWebkitAppName\n                                      , afterSerialization: options.afterSerialization\n                                      , beforeDeserialization: options.beforeDeserialization\n                                      , corruptAlertThreshold: options.corruptAlertThreshold\n                                      });\n\n  // This new executor is ready if we don't use persistence\n  // If we do, it will only be ready once loadDatabase is called\n  this.executor = new Executor();\n  if (this.inMemoryOnly) { this.executor.ready = true; }\n\n  // Indexed by field name, dot notation can be used\n  // _id is always indexed and since _ids are generated randomly the underlying\n  // binary is always well-balanced\n  this.indexes = {};\n  this.indexes._id = new Index({ fieldName: '_id', unique: true });\n  this.ttlIndexes = {};\n\n  // Queue a load of the database right away and call the onload handler\n  // By default (no onload handler), if there is an error there, no operation will be possible so warn the user by throwing an exception\n  if (this.autoload) { this.loadDatabase(options.onload || function (err) {\n    if (err) { throw err; }\n  }); }\n}\n\nutil.inherits(Datastore, require('events').EventEmitter);\n\n\n/**\n * Load the database from the datafile, and trigger the execution of buffered commands if any\n */\nDatastore.prototype.loadDatabase = function () {\n  this.executor.push({ this: this.persistence, fn: this.persistence.loadDatabase, arguments: arguments }, true);\n};\n\n\n/**\n * Get an array of all the data in the database\n */\nDatastore.prototype.getAllData = function () {\n  return this.indexes._id.getAll();\n};\n\n\n/**\n * Reset all currently defined indexes\n */\nDatastore.prototype.resetIndexes = function (newData) {\n  var self = this;\n\n  Object.keys(this.indexes).forEach(function (i) {\n    self.indexes[i].reset(newData);\n  });\n};\n\n\n/**\n * Ensure an index is kept for this field. Same parameters as lib/indexes\n * For now this function is synchronous, we need to test how much time it takes\n * We use an async API for consistency with the rest of the code\n * @param {String} options.fieldName\n * @param {Boolean} options.unique\n * @param {Boolean} options.sparse\n * @param {Number} options.expireAfterSeconds - Optional, if set this index becomes a TTL index (only works on Date fields, not arrays of Date)\n * @param {Function} cb Optional callback, signature: err\n */\nDatastore.prototype.ensureIndex = function (options, cb) {\n  var err\n    , callback = cb || function () {};\n\n  options = options || {};\n\n  if (!options.fieldName) {\n    err = new Error(\"Cannot create an index without a fieldName\");\n    err.missingFieldName = true;\n    return callback(err);\n  }\n  if (this.indexes[options.fieldName]) { return callback(null); }\n\n  this.indexes[options.fieldName] = new Index(options);\n  if (options.expireAfterSeconds !== undefined) { this.ttlIndexes[options.fieldName] = options.expireAfterSeconds; }   // With this implementation index creation is not necessary to ensure TTL but we stick with MongoDB's API here\n\n  try {\n    this.indexes[options.fieldName].insert(this.getAllData());\n  } catch (e) {\n    delete this.indexes[options.fieldName];\n    return callback(e);\n  }\n\n  // We may want to force all options to be persisted including defaults, not just the ones passed the index creation function\n  this.persistence.persistNewState([{ $$indexCreated: options }], function (err) {\n    if (err) { return callback(err); }\n    return callback(null);\n  });\n};\n\n\n/**\n * Remove an index\n * @param {String} fieldName\n * @param {Function} cb Optional callback, signature: err\n */\nDatastore.prototype.removeIndex = function (fieldName, cb) {\n  var callback = cb || function () {};\n\n  delete this.indexes[fieldName];\n\n  this.persistence.persistNewState([{ $$indexRemoved: fieldName }], function (err) {\n    if (err) { return callback(err); }\n    return callback(null);\n  });\n};\n\n\n/**\n * Add one or several document(s) to all indexes\n */\nDatastore.prototype.addToIndexes = function (doc) {\n  var i, failingIndex, error\n    , keys = Object.keys(this.indexes)\n    ;\n\n  for (i = 0; i < keys.length; i += 1) {\n    try {\n      this.indexes[keys[i]].insert(doc);\n    } catch (e) {\n      failingIndex = i;\n      error = e;\n      break;\n    }\n  }\n\n  // If an error happened, we need to rollback the insert on all other indexes\n  if (error) {\n    for (i = 0; i < failingIndex; i += 1) {\n      this.indexes[keys[i]].remove(doc);\n    }\n\n    throw error;\n  }\n};\n\n\n/**\n * Remove one or several document(s) from all indexes\n */\nDatastore.prototype.removeFromIndexes = function (doc) {\n  var self = this;\n\n  Object.keys(this.indexes).forEach(function (i) {\n    self.indexes[i].remove(doc);\n  });\n};\n\n\n/**\n * Update one or several documents in all indexes\n * To update multiple documents, oldDoc must be an array of { oldDoc, newDoc } pairs\n * If one update violates a constraint, all changes are rolled back\n */\nDatastore.prototype.updateIndexes = function (oldDoc, newDoc) {\n  var i, failingIndex, error\n    , keys = Object.keys(this.indexes)\n    ;\n\n  for (i = 0; i < keys.length; i += 1) {\n    try {\n      this.indexes[keys[i]].update(oldDoc, newDoc);\n    } catch (e) {\n      failingIndex = i;\n      error = e;\n      break;\n    }\n  }\n\n  // If an error happened, we need to rollback the update on all other indexes\n  if (error) {\n    for (i = 0; i < failingIndex; i += 1) {\n      this.indexes[keys[i]].revertUpdate(oldDoc, newDoc);\n    }\n\n    throw error;\n  }\n};\n\n\n/**\n * Return the list of candidates for a given query\n * Crude implementation for now, we return the candidates given by the first usable index if any\n * We try the following query types, in this order: basic match, $in match, comparison match\n * One way to make it better would be to enable the use of multiple indexes if the first usable index\n * returns too much data. I may do it in the future.\n *\n * Returned candidates will be scanned to find and remove all expired documents\n *\n * @param {Query} query\n * @param {Boolean} dontExpireStaleDocs Optional, defaults to false, if true don't remove stale docs. Useful for the remove function which shouldn't be impacted by expirations\n * @param {Function} callback Signature err, docs\n */\nDatastore.prototype.getCandidates = function (query, dontExpireStaleDocs, callback) {\n  var indexNames = Object.keys(this.indexes)\n    , self = this\n    , usableQueryKeys;\n\n  if (typeof dontExpireStaleDocs === 'function') {\n    callback = dontExpireStaleDocs;\n    dontExpireStaleDocs = false;\n  }\n\n  async.waterfall([\n  // STEP 1: get candidates list by checking indexes from most to least frequent usecase\n  function (cb) {\n    // For a basic match\n    usableQueryKeys = [];\n    Object.keys(query).forEach(function (k) {\n      if (typeof query[k] === 'string' || typeof query[k] === 'number' || typeof query[k] === 'boolean' || util.isDate(query[k]) || query[k] === null) {\n        usableQueryKeys.push(k);\n      }\n    });\n    usableQueryKeys = _.intersection(usableQueryKeys, indexNames);\n    if (usableQueryKeys.length > 0) {\n      return cb(null, self.indexes[usableQueryKeys[0]].getMatching(query[usableQueryKeys[0]]));\n    }\n\n    // For a $in match\n    usableQueryKeys = [];\n    Object.keys(query).forEach(function (k) {\n      if (query[k] && query[k].hasOwnProperty('$in')) {\n        usableQueryKeys.push(k);\n      }\n    });\n    usableQueryKeys = _.intersection(usableQueryKeys, indexNames);\n    if (usableQueryKeys.length > 0) {\n      return cb(null, self.indexes[usableQueryKeys[0]].getMatching(query[usableQueryKeys[0]].$in));\n    }\n\n    // For a comparison match\n    usableQueryKeys = [];\n    Object.keys(query).forEach(function (k) {\n      if (query[k] && (query[k].hasOwnProperty('$lt') || query[k].hasOwnProperty('$lte') || query[k].hasOwnProperty('$gt') || query[k].hasOwnProperty('$gte'))) {\n        usableQueryKeys.push(k);\n      }\n    });\n    usableQueryKeys = _.intersection(usableQueryKeys, indexNames);\n    if (usableQueryKeys.length > 0) {\n      return cb(null, self.indexes[usableQueryKeys[0]].getBetweenBounds(query[usableQueryKeys[0]]));\n    }\n\n    // By default, return all the DB data\n    return cb(null, self.getAllData());\n  }\n  // STEP 2: remove all expired documents\n  , function (docs) {\n    if (dontExpireStaleDocs) { return callback(null, docs); }\n\n    var expiredDocsIds = [], validDocs = [], ttlIndexesFieldNames = Object.keys(self.ttlIndexes);\n\n    docs.forEach(function (doc) {\n      var valid = true;\n      ttlIndexesFieldNames.forEach(function (i) {\n        if (doc[i] !== undefined && util.isDate(doc[i]) && Date.now() > doc[i].getTime() + self.ttlIndexes[i] * 1000) {\n          valid = false;\n        }\n      });\n      if (valid) { validDocs.push(doc); } else { expiredDocsIds.push(doc._id); }\n    });\n\n    async.eachSeries(expiredDocsIds, function (_id, cb) {\n      self._remove({ _id: _id }, {}, function (err) {\n        if (err) { return callback(err); }\n        return cb();\n      });\n    }, function (err) {\n      return callback(null, validDocs);\n    });\n  }]);\n};\n\n\n/**\n * Insert a new document\n * @param {Function} cb Optional callback, signature: err, insertedDoc\n *\n * @api private Use Datastore.insert which has the same signature\n */\nDatastore.prototype._insert = function (newDoc, cb) {\n  var callback = cb || function () {}\n    , preparedDoc\n    ;\n\n  try {\n    preparedDoc = this.prepareDocumentForInsertion(newDoc)\n    this._insertInCache(preparedDoc);\n  } catch (e) {\n    return callback(e);\n  }\n\n  this.persistence.persistNewState(util.isArray(preparedDoc) ? preparedDoc : [preparedDoc], function (err) {\n    if (err) { return callback(err); }\n    return callback(null, model.deepCopy(preparedDoc));\n  });\n};\n\n/**\n * Create a new _id that's not already in use\n */\nDatastore.prototype.createNewId = function () {\n  var tentativeId = customUtils.uid(16);\n  // Try as many times as needed to get an unused _id. As explained in customUtils, the probability of this ever happening is extremely small, so this is O(1)\n  if (this.indexes._id.getMatching(tentativeId).length > 0) {\n    tentativeId = this.createNewId();\n  }\n  return tentativeId;\n};\n\n/**\n * Prepare a document (or array of documents) to be inserted in a database\n * Meaning adds _id and timestamps if necessary on a copy of newDoc to avoid any side effect on user input\n * @api private\n */\nDatastore.prototype.prepareDocumentForInsertion = function (newDoc) {\n  var preparedDoc, self = this;\n\n  if (util.isArray(newDoc)) {\n    preparedDoc = [];\n    newDoc.forEach(function (doc) { preparedDoc.push(self.prepareDocumentForInsertion(doc)); });\n  } else {\n    preparedDoc = model.deepCopy(newDoc);\n    if (preparedDoc._id === undefined) { preparedDoc._id = this.createNewId(); }\n    var now = new Date();\n    if (this.timestampData && preparedDoc.createdAt === undefined) { preparedDoc.createdAt = now; }\n    if (this.timestampData && preparedDoc.updatedAt === undefined) { preparedDoc.updatedAt = now; }\n    model.checkObject(preparedDoc);\n  }\n\n  return preparedDoc;\n};\n\n/**\n * If newDoc is an array of documents, this will insert all documents in the cache\n * @api private\n */\nDatastore.prototype._insertInCache = function (preparedDoc) {\n  if (util.isArray(preparedDoc)) {\n    this._insertMultipleDocsInCache(preparedDoc);\n  } else {\n    this.addToIndexes(preparedDoc);\n  }\n};\n\n/**\n * If one insertion fails (e.g. because of a unique constraint), roll back all previous\n * inserts and throws the error\n * @api private\n */\nDatastore.prototype._insertMultipleDocsInCache = function (preparedDocs) {\n  var i, failingI, error;\n\n  for (i = 0; i < preparedDocs.length; i += 1) {\n    try {\n      this.addToIndexes(preparedDocs[i]);\n    } catch (e) {\n      error = e;\n      failingI = i;\n      break;\n    }\n  }\n\n  if (error) {\n    for (i = 0; i < failingI; i += 1) {\n      this.removeFromIndexes(preparedDocs[i]);\n    }\n\n    throw error;\n  }\n};\n\nDatastore.prototype.insert = function () {\n  this.executor.push({ this: this, fn: this._insert, arguments: arguments });\n};\n\n\n/**\n * Count all documents matching the query\n * @param {Object} query MongoDB-style query\n */\nDatastore.prototype.count = function(query, callback) {\n  var cursor = new Cursor(this, query, function(err, docs, callback) {\n    if (err) { return callback(err); }\n    return callback(null, docs.length);\n  });\n\n  if (typeof callback === 'function') {\n    cursor.exec(callback);\n  } else {\n    return cursor;\n  }\n};\n\n\n/**\n * Find all documents matching the query\n * If no callback is passed, we return the cursor so that user can limit, skip and finally exec\n * @param {Object} query MongoDB-style query\n * @param {Object} projection MongoDB-style projection\n */\nDatastore.prototype.find = function (query, projection, callback) {\n  switch (arguments.length) {\n    case 1:\n      projection = {};\n      // callback is undefined, will return a cursor\n      break;\n    case 2:\n      if (typeof projection === 'function') {\n        callback = projection;\n        projection = {};\n      }   // If not assume projection is an object and callback undefined\n      break;\n  }\n\n  var cursor = new Cursor(this, query, function(err, docs, callback) {\n    var res = [], i;\n\n    if (err) { return callback(err); }\n\n    for (i = 0; i < docs.length; i += 1) {\n      res.push(model.deepCopy(docs[i]));\n    }\n    return callback(null, res);\n  });\n\n  cursor.projection(projection);\n  if (typeof callback === 'function') {\n    cursor.exec(callback);\n  } else {\n    return cursor;\n  }\n};\n\n\n/**\n * Find one document matching the query\n * @param {Object} query MongoDB-style query\n * @param {Object} projection MongoDB-style projection\n */\nDatastore.prototype.findOne = function (query, projection, callback) {\n  switch (arguments.length) {\n    case 1:\n      projection = {};\n      // callback is undefined, will return a cursor\n      break;\n    case 2:\n      if (typeof projection === 'function') {\n        callback = projection;\n        projection = {};\n      }   // If not assume projection is an object and callback undefined\n      break;\n  }\n\n  var cursor = new Cursor(this, query, function(err, docs, callback) {\n    if (err) { return callback(err); }\n    if (docs.length === 1) {\n      return callback(null, model.deepCopy(docs[0]));\n    } else {\n      return callback(null, null);\n    }\n  });\n\n  cursor.projection(projection).limit(1);\n  if (typeof callback === 'function') {\n    cursor.exec(callback);\n  } else {\n    return cursor;\n  }\n};\n\n\n/**\n * Update all docs matching query\n * @param {Object} query\n * @param {Object} updateQuery\n * @param {Object} options Optional options\n *                 options.multi If true, can update multiple documents (defaults to false)\n *                 options.upsert If true, document is inserted if the query doesn't match anything\n *                 options.returnUpdatedDocs Defaults to false, if true return as third argument the array of updated matched documents (even if no change actually took place)\n * @param {Function} cb Optional callback, signature: (err, numAffected, affectedDocuments, upsert)\n *                      If update was an upsert, upsert flag is set to true\n *                      affectedDocuments can be one of the following:\n *                        * For an upsert, the upserted document\n *                        * For an update with returnUpdatedDocs option false, null\n *                        * For an update with returnUpdatedDocs true and multi false, the updated document\n *                        * For an update with returnUpdatedDocs true and multi true, the array of updated documents\n *\n * WARNING: The API was changed between v1.7.4 and v1.8, for consistency and readability reasons. Prior and including to v1.7.4,\n *          the callback signature was (err, numAffected, updated) where updated was the updated document in case of an upsert\n *          or the array of updated documents for an update if the returnUpdatedDocs option was true. That meant that the type of\n *          affectedDocuments in a non multi update depended on whether there was an upsert or not, leaving only two ways for the\n *          user to check whether an upsert had occured: checking the type of affectedDocuments or running another find query on\n *          the whole dataset to check its size. Both options being ugly, the breaking change was necessary.\n *\n * @api private Use Datastore.update which has the same signature\n */\nDatastore.prototype._update = function (query, updateQuery, options, cb) {\n  var callback\n    , self = this\n    , numReplaced = 0\n    , multi, upsert\n    , i\n    ;\n\n  if (typeof options === 'function') { cb = options; options = {}; }\n  callback = cb || function () {};\n  multi = options.multi !== undefined ? options.multi : false;\n  upsert = options.upsert !== undefined ? options.upsert : false;\n\n  async.waterfall([\n  function (cb) {   // If upsert option is set, check whether we need to insert the doc\n    if (!upsert) { return cb(); }\n\n    // Need to use an internal function not tied to the executor to avoid deadlock\n    var cursor = new Cursor(self, query);\n    cursor.limit(1)._exec(function (err, docs) {\n      if (err) { return callback(err); }\n      if (docs.length === 1) {\n        return cb();\n      } else {\n        var toBeInserted;\n\n        try {\n          model.checkObject(updateQuery);\n          // updateQuery is a simple object with no modifier, use it as the document to insert\n          toBeInserted = updateQuery;\n        } catch (e) {\n          // updateQuery contains modifiers, use the find query as the base,\n          // strip it from all operators and update it according to updateQuery\n          try {\n            toBeInserted = model.modify(model.deepCopy(query, true), updateQuery);\n          } catch (err) {\n            return callback(err);\n          }\n        }\n\n        return self._insert(toBeInserted, function (err, newDoc) {\n          if (err) { return callback(err); }\n          return callback(null, 1, newDoc, true);\n        });\n      }\n    });\n  }\n  , function () {   // Perform the update\n    var modifiedDoc , modifications = [], createdAt;\n\n    self.getCandidates(query, function (err, candidates) {\n      if (err) { return callback(err); }\n\n      // Preparing update (if an error is thrown here neither the datafile nor\n      // the in-memory indexes are affected)\n      try {\n        for (i = 0; i < candidates.length; i += 1) {\n          if (model.match(candidates[i], query) && (multi || numReplaced === 0)) {\n            numReplaced += 1;\n            if (self.timestampData) { createdAt = candidates[i].createdAt; }\n            modifiedDoc = model.modify(candidates[i], updateQuery);\n            if (self.timestampData) {\n              modifiedDoc.createdAt = createdAt;\n              modifiedDoc.updatedAt = new Date();\n            }\n            modifications.push({ oldDoc: candidates[i], newDoc: modifiedDoc });\n          }\n        }\n      } catch (err) {\n        return callback(err);\n      }\n\n      // Change the docs in memory\n      try {\n        self.updateIndexes(modifications);\n      } catch (err) {\n        return callback(err);\n      }\n\n      // Update the datafile\n      var updatedDocs = _.pluck(modifications, 'newDoc');\n      self.persistence.persistNewState(updatedDocs, function (err) {\n        if (err) { return callback(err); }\n        if (!options.returnUpdatedDocs) {\n          return callback(null, numReplaced);\n        } else {\n          var updatedDocsDC = [];\n          updatedDocs.forEach(function (doc) { updatedDocsDC.push(model.deepCopy(doc)); });\n          if (! multi) { updatedDocsDC = updatedDocsDC[0]; }\n          return callback(null, numReplaced, updatedDocsDC);\n        }\n      });\n    });\n  }]);\n};\n\nDatastore.prototype.update = function () {\n  this.executor.push({ this: this, fn: this._update, arguments: arguments });\n};\n\n\n/**\n * Remove all docs matching the query\n * For now very naive implementation (similar to update)\n * @param {Object} query\n * @param {Object} options Optional options\n *                 options.multi If true, can update multiple documents (defaults to false)\n * @param {Function} cb Optional callback, signature: err, numRemoved\n *\n * @api private Use Datastore.remove which has the same signature\n */\nDatastore.prototype._remove = function (query, options, cb) {\n  var callback\n    , self = this, numRemoved = 0, removedDocs = [], multi\n    ;\n\n  if (typeof options === 'function') { cb = options; options = {}; }\n  callback = cb || function () {};\n  multi = options.multi !== undefined ? options.multi : false;\n\n  this.getCandidates(query, true, function (err, candidates) {\n    if (err) { return callback(err); }\n\n    try {\n      candidates.forEach(function (d) {\n        if (model.match(d, query) && (multi || numRemoved === 0)) {\n          numRemoved += 1;\n          removedDocs.push({ $$deleted: true, _id: d._id });\n          self.removeFromIndexes(d);\n        }\n      });\n    } catch (err) { return callback(err); }\n\n    self.persistence.persistNewState(removedDocs, function (err) {\n      if (err) { return callback(err); }\n      return callback(null, numRemoved);\n    });\n  });\n};\n\nDatastore.prototype.remove = function () {\n  this.executor.push({ this: this, fn: this._remove, arguments: arguments });\n};\n\n\n\nmodule.exports = Datastore;\n"},"lineCount":705}},"hash":"a1b31d481325fc8ce05e0b3013f41e41","cacheData":{"env":{}}}
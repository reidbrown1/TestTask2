{"id":"../node_modules/binary-search-tree/lib/bst.js","dependencies":[{"name":"/Users/reidbrown/react-bootcamp/TestTask/package.json","includedInParent":true,"mtime":1592783413663},{"name":"/Users/reidbrown/react-bootcamp/TestTask/.babelrc","includedInParent":true,"mtime":1589062941327},{"name":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/package.json","includedInParent":true,"mtime":1592783413306},{"name":"./customUtils","loc":{"line":4,"column":26},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/bst.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/customUtils.js"}],"generated":{"js":"/**\n * Simple binary search tree\n */\nvar customUtils = require('./customUtils');\n\n\n/**\n * Constructor\n * @param {Object} options Optional\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Key}      options.key Initialize this BST's key with key\n * @param {Value}    options.value Initialize this BST's data with [value]\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction BinarySearchTree (options) {\n  options = options || {};\n\n  this.left = null;\n  this.right = null;\n  this.parent = options.parent !== undefined ? options.parent : null;\n  if (options.hasOwnProperty('key')) { this.key = options.key; }\n  this.data = options.hasOwnProperty('value') ? [options.value] : [];\n  this.unique = options.unique || false;\n\n  this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction;\n  this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality;\n}\n\n\n// ================================\n// Methods used to test the tree\n// ================================\n\n\n/**\n * Get the descendant with max key\n */\nBinarySearchTree.prototype.getMaxKeyDescendant = function () {\n  if (this.right) {\n    return this.right.getMaxKeyDescendant();\n  } else {\n    return this;\n  }\n};\n\n\n/**\n * Get the maximum key\n */\nBinarySearchTree.prototype.getMaxKey = function () {\n  return this.getMaxKeyDescendant().key;\n};\n\n\n/**\n * Get the descendant with min key\n */\nBinarySearchTree.prototype.getMinKeyDescendant = function () {\n  if (this.left) {\n    return this.left.getMinKeyDescendant()\n  } else {\n    return this;\n  }\n};\n\n\n/**\n * Get the minimum key\n */\nBinarySearchTree.prototype.getMinKey = function () {\n  return this.getMinKeyDescendant().key;\n};\n\n\n/**\n * Check that all nodes (incl. leaves) fullfil condition given by fn\n * test is a function passed every (key, data) and which throws if the condition is not met\n */\nBinarySearchTree.prototype.checkAllNodesFullfillCondition = function (test) {\n  if (!this.hasOwnProperty('key')) { return; }\n\n  test(this.key, this.data);\n  if (this.left) { this.left.checkAllNodesFullfillCondition(test); }\n  if (this.right) { this.right.checkAllNodesFullfillCondition(test); }\n};\n\n\n/**\n * Check that the core BST properties on node ordering are verified\n * Throw if they aren't\n */\nBinarySearchTree.prototype.checkNodeOrdering = function () {\n  var self = this;\n\n  if (!this.hasOwnProperty('key')) { return; }\n\n  if (this.left) {\n    this.left.checkAllNodesFullfillCondition(function (k) {\n      if (self.compareKeys(k, self.key) >= 0) {\n        throw new Error('Tree with root ' + self.key + ' is not a binary search tree');\n      }\n    });\n    this.left.checkNodeOrdering();\n  }\n\n  if (this.right) {\n    this.right.checkAllNodesFullfillCondition(function (k) {\n      if (self.compareKeys(k, self.key) <= 0) {\n        throw new Error('Tree with root ' + self.key + ' is not a binary search tree');\n      }\n    });\n    this.right.checkNodeOrdering();\n  }\n};\n\n\n/**\n * Check that all pointers are coherent in this tree\n */\nBinarySearchTree.prototype.checkInternalPointers = function () {\n  if (this.left) {\n    if (this.left.parent !== this) { throw new Error('Parent pointer broken for key ' + this.key); }\n    this.left.checkInternalPointers();\n  }\n\n  if (this.right) {\n    if (this.right.parent !== this) { throw new Error('Parent pointer broken for key ' + this.key); }\n    this.right.checkInternalPointers();\n  }\n};\n\n\n/**\n * Check that a tree is a BST as defined here (node ordering and pointer references)\n */\nBinarySearchTree.prototype.checkIsBST = function () {\n  this.checkNodeOrdering();\n  this.checkInternalPointers();\n  if (this.parent) { throw new Error(\"The root shouldn't have a parent\"); }\n};\n\n\n/**\n * Get number of keys inserted\n */\nBinarySearchTree.prototype.getNumberOfKeys = function () {\n  var res;\n\n  if (!this.hasOwnProperty('key')) { return 0; }\n\n  res = 1;\n  if (this.left) { res += this.left.getNumberOfKeys(); }\n  if (this.right) { res += this.right.getNumberOfKeys(); }\n\n  return res;\n};\n\n\n\n// ============================================\n// Methods used to actually work on the tree\n// ============================================\n\n/**\n * Create a BST similar (i.e. same options except for key and value) to the current one\n * Use the same constructor (i.e. BinarySearchTree, AVLTree etc)\n * @param {Object} options see constructor\n */\nBinarySearchTree.prototype.createSimilar = function (options) {\n  options = options || {};\n  options.unique = this.unique;\n  options.compareKeys = this.compareKeys;\n  options.checkValueEquality = this.checkValueEquality;\n\n  return new this.constructor(options);\n};\n\n\n/**\n * Create the left child of this BST and return it\n */\nBinarySearchTree.prototype.createLeftChild = function (options) {\n  var leftChild = this.createSimilar(options);\n  leftChild.parent = this;\n  this.left = leftChild;\n\n  return leftChild;\n};\n\n\n/**\n * Create the right child of this BST and return it\n */\nBinarySearchTree.prototype.createRightChild = function (options) {\n  var rightChild = this.createSimilar(options);\n  rightChild.parent = this;\n  this.right = rightChild;\n\n  return rightChild;\n};\n\n\n/**\n * Insert a new element\n */\nBinarySearchTree.prototype.insert = function (key, value) {\n  // Empty tree, insert as root\n  if (!this.hasOwnProperty('key')) {\n    this.key = key;\n    this.data.push(value);\n    return;\n  }\n\n  // Same key as root\n  if (this.compareKeys(this.key, key) === 0) {\n    if (this.unique) {\n      var err = new Error(\"Can't insert key \" + key + \", it violates the unique constraint\");\n      err.key = key;\n      err.errorType = 'uniqueViolated';\n      throw err;\n    } else {\n      this.data.push(value);\n    }\n    return;\n  }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    // Insert in left subtree\n    if (this.left) {\n      this.left.insert(key, value);\n    } else {\n      this.createLeftChild({ key: key, value: value });\n    }\n  } else {\n    // Insert in right subtree\n    if (this.right) {\n      this.right.insert(key, value);\n    } else {\n      this.createRightChild({ key: key, value: value });\n    }\n  }\n};\n\n\n/**\n * Search for all data corresponding to a key\n */\nBinarySearchTree.prototype.search = function (key) {\n  if (!this.hasOwnProperty('key')) { return []; }\n\n  if (this.compareKeys(this.key, key) === 0) { return this.data; }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    if (this.left) {\n      return this.left.search(key);\n    } else {\n      return [];\n    }\n  } else {\n    if (this.right) {\n      return this.right.search(key);\n    } else {\n      return [];\n    }\n  }\n};\n\n\n/**\n * Return a function that tells whether a given key matches a lower bound\n */\nBinarySearchTree.prototype.getLowerBoundMatcher = function (query) {\n  var self = this;\n\n  // No lower bound\n  if (!query.hasOwnProperty('$gt') && !query.hasOwnProperty('$gte')) {\n    return function () { return true; };\n  }\n\n  if (query.hasOwnProperty('$gt') && query.hasOwnProperty('$gte')) {\n    if (self.compareKeys(query.$gte, query.$gt) === 0) {\n      return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n    }\n\n    if (self.compareKeys(query.$gte, query.$gt) > 0) {\n      return function (key) { return self.compareKeys(key, query.$gte) >= 0; };\n    } else {\n      return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n    }\n  }\n\n  if (query.hasOwnProperty('$gt')) {\n    return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n  } else {\n    return function (key) { return self.compareKeys(key, query.$gte) >= 0; };\n  }\n};\n\n\n/**\n * Return a function that tells whether a given key matches an upper bound\n */\nBinarySearchTree.prototype.getUpperBoundMatcher = function (query) {\n  var self = this;\n\n  // No lower bound\n  if (!query.hasOwnProperty('$lt') && !query.hasOwnProperty('$lte')) {\n    return function () { return true; };\n  }\n\n  if (query.hasOwnProperty('$lt') && query.hasOwnProperty('$lte')) {\n    if (self.compareKeys(query.$lte, query.$lt) === 0) {\n      return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n    }\n\n    if (self.compareKeys(query.$lte, query.$lt) < 0) {\n      return function (key) { return self.compareKeys(key, query.$lte) <= 0; };\n    } else {\n      return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n    }\n  }\n\n  if (query.hasOwnProperty('$lt')) {\n    return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n  } else {\n    return function (key) { return self.compareKeys(key, query.$lte) <= 0; };\n  }\n};\n\n\n// Append all elements in toAppend to array\nfunction append (array, toAppend) {\n  var i;\n\n  for (i = 0; i < toAppend.length; i += 1) {\n    array.push(toAppend[i]);\n  }\n}\n\n\n/**\n * Get all data for a key between bounds\n * Return it in key order\n * @param {Object} query Mongo-style query where keys are $lt, $lte, $gt or $gte (other keys are not considered)\n * @param {Functions} lbm/ubm matching functions calculated at the first recursive step\n */\nBinarySearchTree.prototype.betweenBounds = function (query, lbm, ubm) {\n  var res = [];\n\n  if (!this.hasOwnProperty('key')) { return []; }   // Empty tree\n\n  lbm = lbm || this.getLowerBoundMatcher(query);\n  ubm = ubm || this.getUpperBoundMatcher(query);\n\n  if (lbm(this.key) && this.left) { append(res, this.left.betweenBounds(query, lbm, ubm)); }\n  if (lbm(this.key) && ubm(this.key)) { append(res, this.data); }\n  if (ubm(this.key) && this.right) { append(res, this.right.betweenBounds(query, lbm, ubm)); }\n\n  return res;\n};\n\n\n/**\n * Delete the current node if it is a leaf\n * Return true if it was deleted\n */\nBinarySearchTree.prototype.deleteIfLeaf = function () {\n  if (this.left || this.right) { return false; }\n\n  // The leaf is itself a root\n  if (!this.parent) {\n    delete this.key;\n    this.data = [];\n    return true;\n  }\n\n  if (this.parent.left === this) {\n    this.parent.left = null;\n  } else {\n    this.parent.right = null;\n  }\n\n  return true;\n};\n\n\n/**\n * Delete the current node if it has only one child\n * Return true if it was deleted\n */\nBinarySearchTree.prototype.deleteIfOnlyOneChild = function () {\n  var child;\n\n  if (this.left && !this.right) { child = this.left; }\n  if (!this.left && this.right) { child = this.right; }\n  if (!child) { return false; }\n\n  // Root\n  if (!this.parent) {\n    this.key = child.key;\n    this.data = child.data;\n\n    this.left = null;\n    if (child.left) {\n      this.left = child.left;\n      child.left.parent = this;\n    }\n\n    this.right = null;\n    if (child.right) {\n      this.right = child.right;\n      child.right.parent = this;\n    }\n\n    return true;\n  }\n\n  if (this.parent.left === this) {\n    this.parent.left = child;\n    child.parent = this.parent;\n  } else {\n    this.parent.right = child;\n    child.parent = this.parent;\n  }\n\n  return true;\n};\n\n\n/**\n * Delete a key or just a value\n * @param {Key} key\n * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n */\nBinarySearchTree.prototype.delete = function (key, value) {\n  var newData = [], replaceWith\n    , self = this\n    ;\n\n  if (!this.hasOwnProperty('key')) { return; }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    if (this.left) { this.left.delete(key, value); }\n    return;\n  }\n\n  if (this.compareKeys(key, this.key) > 0) {\n    if (this.right) { this.right.delete(key, value); }\n    return;\n  }\n\n  if (!this.compareKeys(key, this.key) === 0) { return; }\n\n  // Delete only a value\n  if (this.data.length > 1 && value !== undefined) {\n    this.data.forEach(function (d) {\n      if (!self.checkValueEquality(d, value)) { newData.push(d); }\n    });\n    self.data = newData;\n    return;\n  }\n\n  // Delete the whole node\n  if (this.deleteIfLeaf()) {\n    return;\n  }\n  if (this.deleteIfOnlyOneChild()) {\n    return;\n  }\n\n  // We are in the case where the node to delete has two children\n  if (Math.random() >= 0.5) {   // Randomize replacement to avoid unbalancing the tree too much\n    // Use the in-order predecessor\n    replaceWith = this.left.getMaxKeyDescendant();\n\n    this.key = replaceWith.key;\n    this.data = replaceWith.data;\n\n    if (this === replaceWith.parent) {   // Special case\n      this.left = replaceWith.left;\n      if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n    } else {\n      replaceWith.parent.right = replaceWith.left;\n      if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n    }\n  } else {\n    // Use the in-order successor\n    replaceWith = this.right.getMinKeyDescendant();\n\n    this.key = replaceWith.key;\n    this.data = replaceWith.data;\n\n    if (this === replaceWith.parent) {   // Special case\n      this.right = replaceWith.right;\n      if (replaceWith.right) { replaceWith.right.parent = replaceWith.parent; }\n    } else {\n      replaceWith.parent.left = replaceWith.right;\n      if (replaceWith.right) { replaceWith.right.parent = replaceWith.parent; }\n    }\n  }\n};\n\n\n/**\n * Execute a function on every node of the tree, in key order\n * @param {Function} fn Signature: node. Most useful will probably be node.key and node.data\n */\nBinarySearchTree.prototype.executeOnEveryNode = function (fn) {\n  if (this.left) { this.left.executeOnEveryNode(fn); }\n  fn(this);\n  if (this.right) { this.right.executeOnEveryNode(fn); }\n};\n\n\n/**\n * Pretty print a tree\n * @param {Boolean} printData To print the nodes' data along with the key\n */\nBinarySearchTree.prototype.prettyPrint = function (printData, spacing) {\n  spacing = spacing || \"\";\n\n  console.log(spacing + \"* \" + this.key);\n  if (printData) { console.log(spacing + \"* \" + this.data); }\n\n  if (!this.left && !this.right) { return; }\n\n  if (this.left) {\n    this.left.prettyPrint(printData, spacing + \"  \");\n  } else {\n    console.log(spacing + \"  *\");\n  }\n  if (this.right) {\n    this.right.prettyPrint(printData, spacing + \"  \");\n  } else {\n    console.log(spacing + \"  *\");\n  }\n};\n\n\n\n\n// Interface\nmodule.exports = BinarySearchTree;\n","map":{"mappings":[{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/binary-search-tree/lib/bst.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}}],"sources":{"../node_modules/binary-search-tree/lib/bst.js":"/**\n * Simple binary search tree\n */\nvar customUtils = require('./customUtils');\n\n\n/**\n * Constructor\n * @param {Object} options Optional\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Key}      options.key Initialize this BST's key with key\n * @param {Value}    options.value Initialize this BST's data with [value]\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction BinarySearchTree (options) {\n  options = options || {};\n\n  this.left = null;\n  this.right = null;\n  this.parent = options.parent !== undefined ? options.parent : null;\n  if (options.hasOwnProperty('key')) { this.key = options.key; }\n  this.data = options.hasOwnProperty('value') ? [options.value] : [];\n  this.unique = options.unique || false;\n\n  this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction;\n  this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality;\n}\n\n\n// ================================\n// Methods used to test the tree\n// ================================\n\n\n/**\n * Get the descendant with max key\n */\nBinarySearchTree.prototype.getMaxKeyDescendant = function () {\n  if (this.right) {\n    return this.right.getMaxKeyDescendant();\n  } else {\n    return this;\n  }\n};\n\n\n/**\n * Get the maximum key\n */\nBinarySearchTree.prototype.getMaxKey = function () {\n  return this.getMaxKeyDescendant().key;\n};\n\n\n/**\n * Get the descendant with min key\n */\nBinarySearchTree.prototype.getMinKeyDescendant = function () {\n  if (this.left) {\n    return this.left.getMinKeyDescendant()\n  } else {\n    return this;\n  }\n};\n\n\n/**\n * Get the minimum key\n */\nBinarySearchTree.prototype.getMinKey = function () {\n  return this.getMinKeyDescendant().key;\n};\n\n\n/**\n * Check that all nodes (incl. leaves) fullfil condition given by fn\n * test is a function passed every (key, data) and which throws if the condition is not met\n */\nBinarySearchTree.prototype.checkAllNodesFullfillCondition = function (test) {\n  if (!this.hasOwnProperty('key')) { return; }\n\n  test(this.key, this.data);\n  if (this.left) { this.left.checkAllNodesFullfillCondition(test); }\n  if (this.right) { this.right.checkAllNodesFullfillCondition(test); }\n};\n\n\n/**\n * Check that the core BST properties on node ordering are verified\n * Throw if they aren't\n */\nBinarySearchTree.prototype.checkNodeOrdering = function () {\n  var self = this;\n\n  if (!this.hasOwnProperty('key')) { return; }\n\n  if (this.left) {\n    this.left.checkAllNodesFullfillCondition(function (k) {\n      if (self.compareKeys(k, self.key) >= 0) {\n        throw new Error('Tree with root ' + self.key + ' is not a binary search tree');\n      }\n    });\n    this.left.checkNodeOrdering();\n  }\n\n  if (this.right) {\n    this.right.checkAllNodesFullfillCondition(function (k) {\n      if (self.compareKeys(k, self.key) <= 0) {\n        throw new Error('Tree with root ' + self.key + ' is not a binary search tree');\n      }\n    });\n    this.right.checkNodeOrdering();\n  }\n};\n\n\n/**\n * Check that all pointers are coherent in this tree\n */\nBinarySearchTree.prototype.checkInternalPointers = function () {\n  if (this.left) {\n    if (this.left.parent !== this) { throw new Error('Parent pointer broken for key ' + this.key); }\n    this.left.checkInternalPointers();\n  }\n\n  if (this.right) {\n    if (this.right.parent !== this) { throw new Error('Parent pointer broken for key ' + this.key); }\n    this.right.checkInternalPointers();\n  }\n};\n\n\n/**\n * Check that a tree is a BST as defined here (node ordering and pointer references)\n */\nBinarySearchTree.prototype.checkIsBST = function () {\n  this.checkNodeOrdering();\n  this.checkInternalPointers();\n  if (this.parent) { throw new Error(\"The root shouldn't have a parent\"); }\n};\n\n\n/**\n * Get number of keys inserted\n */\nBinarySearchTree.prototype.getNumberOfKeys = function () {\n  var res;\n\n  if (!this.hasOwnProperty('key')) { return 0; }\n\n  res = 1;\n  if (this.left) { res += this.left.getNumberOfKeys(); }\n  if (this.right) { res += this.right.getNumberOfKeys(); }\n\n  return res;\n};\n\n\n\n// ============================================\n// Methods used to actually work on the tree\n// ============================================\n\n/**\n * Create a BST similar (i.e. same options except for key and value) to the current one\n * Use the same constructor (i.e. BinarySearchTree, AVLTree etc)\n * @param {Object} options see constructor\n */\nBinarySearchTree.prototype.createSimilar = function (options) {\n  options = options || {};\n  options.unique = this.unique;\n  options.compareKeys = this.compareKeys;\n  options.checkValueEquality = this.checkValueEquality;\n\n  return new this.constructor(options);\n};\n\n\n/**\n * Create the left child of this BST and return it\n */\nBinarySearchTree.prototype.createLeftChild = function (options) {\n  var leftChild = this.createSimilar(options);\n  leftChild.parent = this;\n  this.left = leftChild;\n\n  return leftChild;\n};\n\n\n/**\n * Create the right child of this BST and return it\n */\nBinarySearchTree.prototype.createRightChild = function (options) {\n  var rightChild = this.createSimilar(options);\n  rightChild.parent = this;\n  this.right = rightChild;\n\n  return rightChild;\n};\n\n\n/**\n * Insert a new element\n */\nBinarySearchTree.prototype.insert = function (key, value) {\n  // Empty tree, insert as root\n  if (!this.hasOwnProperty('key')) {\n    this.key = key;\n    this.data.push(value);\n    return;\n  }\n\n  // Same key as root\n  if (this.compareKeys(this.key, key) === 0) {\n    if (this.unique) {\n      var err = new Error(\"Can't insert key \" + key + \", it violates the unique constraint\");\n      err.key = key;\n      err.errorType = 'uniqueViolated';\n      throw err;\n    } else {\n      this.data.push(value);\n    }\n    return;\n  }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    // Insert in left subtree\n    if (this.left) {\n      this.left.insert(key, value);\n    } else {\n      this.createLeftChild({ key: key, value: value });\n    }\n  } else {\n    // Insert in right subtree\n    if (this.right) {\n      this.right.insert(key, value);\n    } else {\n      this.createRightChild({ key: key, value: value });\n    }\n  }\n};\n\n\n/**\n * Search for all data corresponding to a key\n */\nBinarySearchTree.prototype.search = function (key) {\n  if (!this.hasOwnProperty('key')) { return []; }\n\n  if (this.compareKeys(this.key, key) === 0) { return this.data; }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    if (this.left) {\n      return this.left.search(key);\n    } else {\n      return [];\n    }\n  } else {\n    if (this.right) {\n      return this.right.search(key);\n    } else {\n      return [];\n    }\n  }\n};\n\n\n/**\n * Return a function that tells whether a given key matches a lower bound\n */\nBinarySearchTree.prototype.getLowerBoundMatcher = function (query) {\n  var self = this;\n\n  // No lower bound\n  if (!query.hasOwnProperty('$gt') && !query.hasOwnProperty('$gte')) {\n    return function () { return true; };\n  }\n\n  if (query.hasOwnProperty('$gt') && query.hasOwnProperty('$gte')) {\n    if (self.compareKeys(query.$gte, query.$gt) === 0) {\n      return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n    }\n\n    if (self.compareKeys(query.$gte, query.$gt) > 0) {\n      return function (key) { return self.compareKeys(key, query.$gte) >= 0; };\n    } else {\n      return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n    }\n  }\n\n  if (query.hasOwnProperty('$gt')) {\n    return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n  } else {\n    return function (key) { return self.compareKeys(key, query.$gte) >= 0; };\n  }\n};\n\n\n/**\n * Return a function that tells whether a given key matches an upper bound\n */\nBinarySearchTree.prototype.getUpperBoundMatcher = function (query) {\n  var self = this;\n\n  // No lower bound\n  if (!query.hasOwnProperty('$lt') && !query.hasOwnProperty('$lte')) {\n    return function () { return true; };\n  }\n\n  if (query.hasOwnProperty('$lt') && query.hasOwnProperty('$lte')) {\n    if (self.compareKeys(query.$lte, query.$lt) === 0) {\n      return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n    }\n\n    if (self.compareKeys(query.$lte, query.$lt) < 0) {\n      return function (key) { return self.compareKeys(key, query.$lte) <= 0; };\n    } else {\n      return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n    }\n  }\n\n  if (query.hasOwnProperty('$lt')) {\n    return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n  } else {\n    return function (key) { return self.compareKeys(key, query.$lte) <= 0; };\n  }\n};\n\n\n// Append all elements in toAppend to array\nfunction append (array, toAppend) {\n  var i;\n\n  for (i = 0; i < toAppend.length; i += 1) {\n    array.push(toAppend[i]);\n  }\n}\n\n\n/**\n * Get all data for a key between bounds\n * Return it in key order\n * @param {Object} query Mongo-style query where keys are $lt, $lte, $gt or $gte (other keys are not considered)\n * @param {Functions} lbm/ubm matching functions calculated at the first recursive step\n */\nBinarySearchTree.prototype.betweenBounds = function (query, lbm, ubm) {\n  var res = [];\n\n  if (!this.hasOwnProperty('key')) { return []; }   // Empty tree\n\n  lbm = lbm || this.getLowerBoundMatcher(query);\n  ubm = ubm || this.getUpperBoundMatcher(query);\n\n  if (lbm(this.key) && this.left) { append(res, this.left.betweenBounds(query, lbm, ubm)); }\n  if (lbm(this.key) && ubm(this.key)) { append(res, this.data); }\n  if (ubm(this.key) && this.right) { append(res, this.right.betweenBounds(query, lbm, ubm)); }\n\n  return res;\n};\n\n\n/**\n * Delete the current node if it is a leaf\n * Return true if it was deleted\n */\nBinarySearchTree.prototype.deleteIfLeaf = function () {\n  if (this.left || this.right) { return false; }\n\n  // The leaf is itself a root\n  if (!this.parent) {\n    delete this.key;\n    this.data = [];\n    return true;\n  }\n\n  if (this.parent.left === this) {\n    this.parent.left = null;\n  } else {\n    this.parent.right = null;\n  }\n\n  return true;\n};\n\n\n/**\n * Delete the current node if it has only one child\n * Return true if it was deleted\n */\nBinarySearchTree.prototype.deleteIfOnlyOneChild = function () {\n  var child;\n\n  if (this.left && !this.right) { child = this.left; }\n  if (!this.left && this.right) { child = this.right; }\n  if (!child) { return false; }\n\n  // Root\n  if (!this.parent) {\n    this.key = child.key;\n    this.data = child.data;\n\n    this.left = null;\n    if (child.left) {\n      this.left = child.left;\n      child.left.parent = this;\n    }\n\n    this.right = null;\n    if (child.right) {\n      this.right = child.right;\n      child.right.parent = this;\n    }\n\n    return true;\n  }\n\n  if (this.parent.left === this) {\n    this.parent.left = child;\n    child.parent = this.parent;\n  } else {\n    this.parent.right = child;\n    child.parent = this.parent;\n  }\n\n  return true;\n};\n\n\n/**\n * Delete a key or just a value\n * @param {Key} key\n * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n */\nBinarySearchTree.prototype.delete = function (key, value) {\n  var newData = [], replaceWith\n    , self = this\n    ;\n\n  if (!this.hasOwnProperty('key')) { return; }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    if (this.left) { this.left.delete(key, value); }\n    return;\n  }\n\n  if (this.compareKeys(key, this.key) > 0) {\n    if (this.right) { this.right.delete(key, value); }\n    return;\n  }\n\n  if (!this.compareKeys(key, this.key) === 0) { return; }\n\n  // Delete only a value\n  if (this.data.length > 1 && value !== undefined) {\n    this.data.forEach(function (d) {\n      if (!self.checkValueEquality(d, value)) { newData.push(d); }\n    });\n    self.data = newData;\n    return;\n  }\n\n  // Delete the whole node\n  if (this.deleteIfLeaf()) {\n    return;\n  }\n  if (this.deleteIfOnlyOneChild()) {\n    return;\n  }\n\n  // We are in the case where the node to delete has two children\n  if (Math.random() >= 0.5) {   // Randomize replacement to avoid unbalancing the tree too much\n    // Use the in-order predecessor\n    replaceWith = this.left.getMaxKeyDescendant();\n\n    this.key = replaceWith.key;\n    this.data = replaceWith.data;\n\n    if (this === replaceWith.parent) {   // Special case\n      this.left = replaceWith.left;\n      if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n    } else {\n      replaceWith.parent.right = replaceWith.left;\n      if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n    }\n  } else {\n    // Use the in-order successor\n    replaceWith = this.right.getMinKeyDescendant();\n\n    this.key = replaceWith.key;\n    this.data = replaceWith.data;\n\n    if (this === replaceWith.parent) {   // Special case\n      this.right = replaceWith.right;\n      if (replaceWith.right) { replaceWith.right.parent = replaceWith.parent; }\n    } else {\n      replaceWith.parent.left = replaceWith.right;\n      if (replaceWith.right) { replaceWith.right.parent = replaceWith.parent; }\n    }\n  }\n};\n\n\n/**\n * Execute a function on every node of the tree, in key order\n * @param {Function} fn Signature: node. Most useful will probably be node.key and node.data\n */\nBinarySearchTree.prototype.executeOnEveryNode = function (fn) {\n  if (this.left) { this.left.executeOnEveryNode(fn); }\n  fn(this);\n  if (this.right) { this.right.executeOnEveryNode(fn); }\n};\n\n\n/**\n * Pretty print a tree\n * @param {Boolean} printData To print the nodes' data along with the key\n */\nBinarySearchTree.prototype.prettyPrint = function (printData, spacing) {\n  spacing = spacing || \"\";\n\n  console.log(spacing + \"* \" + this.key);\n  if (printData) { console.log(spacing + \"* \" + this.data); }\n\n  if (!this.left && !this.right) { return; }\n\n  if (this.left) {\n    this.left.prettyPrint(printData, spacing + \"  \");\n  } else {\n    console.log(spacing + \"  *\");\n  }\n  if (this.right) {\n    this.right.prettyPrint(printData, spacing + \"  \");\n  } else {\n    console.log(spacing + \"  *\");\n  }\n};\n\n\n\n\n// Interface\nmodule.exports = BinarySearchTree;\n"},"lineCount":544}},"hash":"7b61033ac82d312c124da45a83e84b71","cacheData":{"env":{}}}
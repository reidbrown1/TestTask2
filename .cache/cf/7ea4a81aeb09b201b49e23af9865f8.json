{"id":"../node_modules/nedb/lib/executor.js","dependencies":[{"name":"/Users/reidbrown/react-bootcamp/TestTask/package.json","includedInParent":true,"mtime":1592783413663},{"name":"/Users/reidbrown/react-bootcamp/TestTask/.babelrc","includedInParent":true,"mtime":1589062941327},{"name":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/package.json","includedInParent":true,"mtime":1592783413306},{"name":"async","loc":{"line":5,"column":20},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/executor.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/async/lib/async.js"},{"name":"process","parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/nedb/lib/executor.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n/**\n * Responsible for sequentially executing actions on the database\n */\n\nvar async = require('async')\n  ;\n\nfunction Executor () {\n  this.buffer = [];\n  this.ready = false;\n\n  // This queue will execute all commands, one-by-one in order\n  this.queue = async.queue(function (task, cb) {\n    var newArguments = [];\n\n    // task.arguments is an array-like object on which adding a new field doesn't work, so we transform it into a real array\n    for (var i = 0; i < task.arguments.length; i += 1) { newArguments.push(task.arguments[i]); }\n    var lastArg = task.arguments[task.arguments.length - 1];\n\n    // Always tell the queue task is complete. Execute callback if any was given.\n    if (typeof lastArg === 'function') {\n      // Callback was supplied\n      newArguments[newArguments.length - 1] = function () {\n        if (typeof setImmediate === 'function') {\n           setImmediate(cb);\n        } else {\n          process.nextTick(cb);\n        }\n        lastArg.apply(null, arguments);\n      };\n    } else if (!lastArg && task.arguments.length !== 0) {\n      // false/undefined/null supplied as callbback\n      newArguments[newArguments.length - 1] = function () { cb(); };\n    } else {\n      // Nothing supplied as callback\n      newArguments.push(function () { cb(); });\n    }\n\n\n    task.fn.apply(task.this, newArguments);\n  }, 1);\n}\n\n\n/**\n * If executor is ready, queue task (and process it immediately if executor was idle)\n * If not, buffer task for later processing\n * @param {Object} task\n *                 task.this - Object to use as this\n *                 task.fn - Function to execute\n *                 task.arguments - Array of arguments, IMPORTANT: only the last argument may be a function (the callback)\n *                                                                 and the last argument cannot be false/undefined/null\n * @param {Boolean} forceQueuing Optional (defaults to false) force executor to queue task even if it is not ready\n */\nExecutor.prototype.push = function (task, forceQueuing) {\n  if (this.ready || forceQueuing) {\n    this.queue.push(task);\n  } else {\n    this.buffer.push(task);\n  }\n};\n\n\n/**\n * Queue all tasks in buffer (in the same order they came in)\n * Automatically sets executor as ready\n */\nExecutor.prototype.processBuffer = function () {\n  var i;\n  this.ready = true;\n  for (i = 0; i < this.buffer.length; i += 1) { this.queue.push(this.buffer[i]); }\n  this.buffer = [];\n};\n\n\n\n// Interface\nmodule.exports = Executor;\n","map":{"mappings":[{"source":"../node_modules/nedb/lib/executor.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/nedb/lib/executor.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}}],"sources":{"../node_modules/nedb/lib/executor.js":"/**\n * Responsible for sequentially executing actions on the database\n */\n\nvar async = require('async')\n  ;\n\nfunction Executor () {\n  this.buffer = [];\n  this.ready = false;\n\n  // This queue will execute all commands, one-by-one in order\n  this.queue = async.queue(function (task, cb) {\n    var newArguments = [];\n\n    // task.arguments is an array-like object on which adding a new field doesn't work, so we transform it into a real array\n    for (var i = 0; i < task.arguments.length; i += 1) { newArguments.push(task.arguments[i]); }\n    var lastArg = task.arguments[task.arguments.length - 1];\n\n    // Always tell the queue task is complete. Execute callback if any was given.\n    if (typeof lastArg === 'function') {\n      // Callback was supplied\n      newArguments[newArguments.length - 1] = function () {\n        if (typeof setImmediate === 'function') {\n           setImmediate(cb);\n        } else {\n          process.nextTick(cb);\n        }\n        lastArg.apply(null, arguments);\n      };\n    } else if (!lastArg && task.arguments.length !== 0) {\n      // false/undefined/null supplied as callbback\n      newArguments[newArguments.length - 1] = function () { cb(); };\n    } else {\n      // Nothing supplied as callback\n      newArguments.push(function () { cb(); });\n    }\n\n\n    task.fn.apply(task.this, newArguments);\n  }, 1);\n}\n\n\n/**\n * If executor is ready, queue task (and process it immediately if executor was idle)\n * If not, buffer task for later processing\n * @param {Object} task\n *                 task.this - Object to use as this\n *                 task.fn - Function to execute\n *                 task.arguments - Array of arguments, IMPORTANT: only the last argument may be a function (the callback)\n *                                                                 and the last argument cannot be false/undefined/null\n * @param {Boolean} forceQueuing Optional (defaults to false) force executor to queue task even if it is not ready\n */\nExecutor.prototype.push = function (task, forceQueuing) {\n  if (this.ready || forceQueuing) {\n    this.queue.push(task);\n  } else {\n    this.buffer.push(task);\n  }\n};\n\n\n/**\n * Queue all tasks in buffer (in the same order they came in)\n * Automatically sets executor as ready\n */\nExecutor.prototype.processBuffer = function () {\n  var i;\n  this.ready = true;\n  for (i = 0; i < this.buffer.length; i += 1) { this.queue.push(this.buffer[i]); }\n  this.buffer = [];\n};\n\n\n\n// Interface\nmodule.exports = Executor;\n"},"lineCount":80}},"hash":"a1310d496bd0fe130b3922869d247346","cacheData":{"env":{}}}
{"id":"../node_modules/binary-search-tree/lib/avltree.js","dependencies":[{"name":"/Users/reidbrown/react-bootcamp/TestTask/package.json","includedInParent":true,"mtime":1592783413663},{"name":"/Users/reidbrown/react-bootcamp/TestTask/.babelrc","includedInParent":true,"mtime":1589062941327},{"name":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/package.json","includedInParent":true,"mtime":1592783413306},{"name":"./bst","loc":{"line":4,"column":31},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/avltree.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/bst.js"},{"name":"./customUtils","loc":{"line":5,"column":26},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/avltree.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/customUtils.js"},{"name":"util","loc":{"line":6,"column":19},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/avltree.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/util/util.js"},{"name":"underscore","loc":{"line":7,"column":16},"parent":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/binary-search-tree/lib/avltree.js","resolved":"/Users/reidbrown/react-bootcamp/TestTask/node_modules/underscore/underscore.js"}],"generated":{"js":"/**\n * Self-balancing binary search tree using the AVL implementation\n */\nvar BinarySearchTree = require('./bst')\n  , customUtils = require('./customUtils')\n  , util = require('util')\n  , _ = require('underscore')\n  ;\n\n\n/**\n * Constructor\n * We can't use a direct pointer to the root node (as in the simple binary search tree)\n * as the root will change during tree rotations\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction AVLTree (options) {\n  this.tree = new _AVLTree(options);\n}\n\n\n/**\n * Constructor of the internal AVLTree\n * @param {Object} options Optional\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Key}      options.key Initialize this BST's key with key\n * @param {Value}    options.value Initialize this BST's data with [value]\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction _AVLTree (options) {\n  options = options || {};\n\n  this.left = null;\n  this.right = null;\n  this.parent = options.parent !== undefined ? options.parent : null;\n  if (options.hasOwnProperty('key')) { this.key = options.key; }\n  this.data = options.hasOwnProperty('value') ? [options.value] : [];\n  this.unique = options.unique || false;\n\n  this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction;\n  this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality;\n}\n\n\n/**\n * Inherit basic functions from the basic binary search tree\n */\nutil.inherits(_AVLTree, BinarySearchTree);\n\n/**\n * Keep a pointer to the internal tree constructor for testing purposes\n */\nAVLTree._AVLTree = _AVLTree;\n\n\n/**\n * Check the recorded height is correct for every node\n * Throws if one height doesn't match\n */\n_AVLTree.prototype.checkHeightCorrect = function () {\n  var leftH, rightH;\n\n  if (!this.hasOwnProperty('key')) { return; }   // Empty tree\n\n  if (this.left && this.left.height === undefined) { throw new Error(\"Undefined height for node \" + this.left.key); }\n  if (this.right && this.right.height === undefined) { throw new Error(\"Undefined height for node \" + this.right.key); }\n  if (this.height === undefined) { throw new Error(\"Undefined height for node \" + this.key); }\n\n  leftH = this.left ? this.left.height : 0;\n  rightH = this.right ? this.right.height : 0;\n\n  if (this.height !== 1 + Math.max(leftH, rightH)) { throw new Error(\"Height constraint failed for node \" + this.key); }\n  if (this.left) { this.left.checkHeightCorrect(); }\n  if (this.right) { this.right.checkHeightCorrect(); }\n};\n\n\n/**\n * Return the balance factor\n */\n_AVLTree.prototype.balanceFactor = function () {\n  var leftH = this.left ? this.left.height : 0\n    , rightH = this.right ? this.right.height : 0\n    ;\n  return leftH - rightH;\n};\n\n\n/**\n * Check that the balance factors are all between -1 and 1\n */\n_AVLTree.prototype.checkBalanceFactors = function () {\n  if (Math.abs(this.balanceFactor()) > 1) { throw new Error('Tree is unbalanced at node ' + this.key); }\n\n  if (this.left) { this.left.checkBalanceFactors(); }\n  if (this.right) { this.right.checkBalanceFactors(); }\n};\n\n\n/**\n * When checking if the BST conditions are met, also check that the heights are correct\n * and the tree is balanced\n */\n_AVLTree.prototype.checkIsAVLT = function () {\n  _AVLTree.super_.prototype.checkIsBST.call(this);\n  this.checkHeightCorrect();\n  this.checkBalanceFactors();\n};\nAVLTree.prototype.checkIsAVLT = function () { this.tree.checkIsAVLT(); };\n\n\n/**\n * Perform a right rotation of the tree if possible\n * and return the root of the resulting tree\n * The resulting tree's nodes' heights are also updated\n */\n_AVLTree.prototype.rightRotation = function () {\n  var q = this\n    , p = this.left\n    , b\n    , ah, bh, ch;\n\n  if (!p) { return this; }   // No change\n\n  b = p.right;\n\n  // Alter tree structure\n  if (q.parent) {\n    p.parent = q.parent;\n    if (q.parent.left === q) { q.parent.left = p; } else { q.parent.right = p; }\n  } else {\n    p.parent = null;\n  }\n  p.right = q;\n  q.parent = p;\n  q.left = b;\n  if (b) { b.parent = q; }\n\n  // Update heights\n  ah = p.left ? p.left.height : 0;\n  bh = b ? b.height : 0;\n  ch = q.right ? q.right.height : 0;\n  q.height = Math.max(bh, ch) + 1;\n  p.height = Math.max(ah, q.height) + 1;\n\n  return p;\n};\n\n\n/**\n * Perform a left rotation of the tree if possible\n * and return the root of the resulting tree\n * The resulting tree's nodes' heights are also updated\n */\n_AVLTree.prototype.leftRotation = function () {\n  var p = this\n    , q = this.right\n    , b\n    , ah, bh, ch;\n\n  if (!q) { return this; }   // No change\n\n  b = q.left;\n\n  // Alter tree structure\n  if (p.parent) {\n    q.parent = p.parent;\n    if (p.parent.left === p) { p.parent.left = q; } else { p.parent.right = q; }\n  } else {\n    q.parent = null;\n  }\n  q.left = p;\n  p.parent = q;\n  p.right = b;\n  if (b) { b.parent = p; }\n\n  // Update heights\n  ah = p.left ? p.left.height : 0;\n  bh = b ? b.height : 0;\n  ch = q.right ? q.right.height : 0;\n  p.height = Math.max(ah, bh) + 1;\n  q.height = Math.max(ch, p.height) + 1;\n\n  return q;\n};\n\n\n/**\n * Modify the tree if its right subtree is too small compared to the left\n * Return the new root if any\n */\n_AVLTree.prototype.rightTooSmall = function () {\n  if (this.balanceFactor() <= 1) { return this; }   // Right is not too small, don't change\n\n  if (this.left.balanceFactor() < 0) {\n    this.left.leftRotation();\n  }\n\n  return this.rightRotation();\n};\n\n\n/**\n * Modify the tree if its left subtree is too small compared to the right\n * Return the new root if any\n */\n_AVLTree.prototype.leftTooSmall = function () {\n  if (this.balanceFactor() >= -1) { return this; }   // Left is not too small, don't change\n\n  if (this.right.balanceFactor() > 0) {\n    this.right.rightRotation();\n  }\n\n  return this.leftRotation();\n};\n\n\n/**\n * Rebalance the tree along the given path. The path is given reversed (as he was calculated\n * in the insert and delete functions).\n * Returns the new root of the tree\n * Of course, the first element of the path must be the root of the tree\n */\n_AVLTree.prototype.rebalanceAlongPath = function (path) {\n  var newRoot = this\n    , rotated\n    , i;\n\n  if (!this.hasOwnProperty('key')) { delete this.height; return this; }   // Empty tree\n\n  // Rebalance the tree and update all heights\n  for (i = path.length - 1; i >= 0; i -= 1) {\n    path[i].height = 1 + Math.max(path[i].left ? path[i].left.height : 0, path[i].right ? path[i].right.height : 0);\n\n    if (path[i].balanceFactor() > 1) {\n      rotated = path[i].rightTooSmall();\n      if (i === 0) { newRoot = rotated; }\n    }\n\n    if (path[i].balanceFactor() < -1) {\n      rotated = path[i].leftTooSmall();\n      if (i === 0) { newRoot = rotated; }\n    }\n  }\n\n  return newRoot;\n};\n\n\n/**\n * Insert a key, value pair in the tree while maintaining the AVL tree height constraint\n * Return a pointer to the root node, which may have changed\n */\n_AVLTree.prototype.insert = function (key, value) {\n  var insertPath = []\n    , currentNode = this\n    ;\n\n  // Empty tree, insert as root\n  if (!this.hasOwnProperty('key')) {\n    this.key = key;\n    this.data.push(value);\n    this.height = 1;\n    return this;\n  }\n\n  // Insert new leaf at the right place\n  while (true) {\n    // Same key: no change in the tree structure\n    if (currentNode.compareKeys(currentNode.key, key) === 0) {\n      if (currentNode.unique) {\n        var err = new Error(\"Can't insert key \" + key + \", it violates the unique constraint\");\n        err.key = key;\n        err.errorType = 'uniqueViolated';\n        throw err;\n      } else {\n        currentNode.data.push(value);\n      }\n      return this;\n    }\n\n    insertPath.push(currentNode);\n\n    if (currentNode.compareKeys(key, currentNode.key) < 0) {\n      if (!currentNode.left) {\n        insertPath.push(currentNode.createLeftChild({ key: key, value: value }));\n        break;\n      } else {\n        currentNode = currentNode.left;\n      }\n    } else {\n      if (!currentNode.right) {\n        insertPath.push(currentNode.createRightChild({ key: key, value: value }));\n        break;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n  }\n\n  return this.rebalanceAlongPath(insertPath);\n};\n\n// Insert in the internal tree, update the pointer to the root if needed\nAVLTree.prototype.insert = function (key, value) {\n  var newTree = this.tree.insert(key, value);\n\n  // If newTree is undefined, that means its structure was not modified\n  if (newTree) { this.tree = newTree; }\n};\n\n\n/**\n * Delete a key or just a value and return the new root of the tree\n * @param {Key} key\n * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n */\n_AVLTree.prototype.delete = function (key, value) {\n  var newData = [], replaceWith\n    , self = this\n    , currentNode = this\n    , deletePath = []\n    ;\n\n  if (!this.hasOwnProperty('key')) { return this; }   // Empty tree\n\n  // Either no match is found and the function will return from within the loop\n  // Or a match is found and deletePath will contain the path from the root to the node to delete after the loop\n  while (true) {\n    if (currentNode.compareKeys(key, currentNode.key) === 0) { break; }\n\n    deletePath.push(currentNode);\n\n    if (currentNode.compareKeys(key, currentNode.key) < 0) {\n      if (currentNode.left) {\n        currentNode = currentNode.left;\n      } else {\n        return this;   // Key not found, no modification\n      }\n    } else {\n      // currentNode.compareKeys(key, currentNode.key) is > 0\n      if (currentNode.right) {\n        currentNode = currentNode.right;\n      } else {\n        return this;   // Key not found, no modification\n      }\n    }\n  }\n\n  // Delete only a value (no tree modification)\n  if (currentNode.data.length > 1 && value) {\n    currentNode.data.forEach(function (d) {\n      if (!currentNode.checkValueEquality(d, value)) { newData.push(d); }\n    });\n    currentNode.data = newData;\n    return this;\n  }\n\n  // Delete a whole node\n\n  // Leaf\n  if (!currentNode.left && !currentNode.right) {\n    if (currentNode === this) {   // This leaf is also the root\n      delete currentNode.key;\n      currentNode.data = [];\n      delete currentNode.height;\n      return this;\n    } else {\n      if (currentNode.parent.left === currentNode) {\n        currentNode.parent.left = null;\n      } else {\n        currentNode.parent.right = null;\n      }\n      return this.rebalanceAlongPath(deletePath);\n    }\n  }\n\n\n  // Node with only one child\n  if (!currentNode.left || !currentNode.right) {\n    replaceWith = currentNode.left ? currentNode.left : currentNode.right;\n\n    if (currentNode === this) {   // This node is also the root\n      replaceWith.parent = null;\n      return replaceWith;   // height of replaceWith is necessarily 1 because the tree was balanced before deletion\n    } else {\n      if (currentNode.parent.left === currentNode) {\n        currentNode.parent.left = replaceWith;\n        replaceWith.parent = currentNode.parent;\n      } else {\n        currentNode.parent.right = replaceWith;\n        replaceWith.parent = currentNode.parent;\n      }\n\n      return this.rebalanceAlongPath(deletePath);\n    }\n  }\n\n\n  // Node with two children\n  // Use the in-order predecessor (no need to randomize since we actively rebalance)\n  deletePath.push(currentNode);\n  replaceWith = currentNode.left;\n\n  // Special case: the in-order predecessor is right below the node to delete\n  if (!replaceWith.right) {\n    currentNode.key = replaceWith.key;\n    currentNode.data = replaceWith.data;\n    currentNode.left = replaceWith.left;\n    if (replaceWith.left) { replaceWith.left.parent = currentNode; }\n    return this.rebalanceAlongPath(deletePath);\n  }\n\n  // After this loop, replaceWith is the right-most leaf in the left subtree\n  // and deletePath the path from the root (inclusive) to replaceWith (exclusive)\n  while (true) {\n    if (replaceWith.right) {\n      deletePath.push(replaceWith);\n      replaceWith = replaceWith.right;\n    } else {\n      break;\n    }\n  }\n\n  currentNode.key = replaceWith.key;\n  currentNode.data = replaceWith.data;\n\n  replaceWith.parent.right = replaceWith.left;\n  if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n\n  return this.rebalanceAlongPath(deletePath);\n};\n\n// Delete a value\nAVLTree.prototype.delete = function (key, value) {\n  var newTree = this.tree.delete(key, value);\n\n  // If newTree is undefined, that means its structure was not modified\n  if (newTree) { this.tree = newTree; }\n};\n\n\n/**\n * Other functions we want to use on an AVLTree as if it were the internal _AVLTree\n */\n['getNumberOfKeys', 'search', 'betweenBounds', 'prettyPrint', 'executeOnEveryNode'].forEach(function (fn) {\n  AVLTree.prototype[fn] = function () {\n    return this.tree[fn].apply(this.tree, arguments);\n  };\n});\n\n\n// Interface\nmodule.exports = AVLTree;\n","map":{"mappings":[{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/binary-search-tree/lib/avltree.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}}],"sources":{"../node_modules/binary-search-tree/lib/avltree.js":"/**\n * Self-balancing binary search tree using the AVL implementation\n */\nvar BinarySearchTree = require('./bst')\n  , customUtils = require('./customUtils')\n  , util = require('util')\n  , _ = require('underscore')\n  ;\n\n\n/**\n * Constructor\n * We can't use a direct pointer to the root node (as in the simple binary search tree)\n * as the root will change during tree rotations\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction AVLTree (options) {\n  this.tree = new _AVLTree(options);\n}\n\n\n/**\n * Constructor of the internal AVLTree\n * @param {Object} options Optional\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Key}      options.key Initialize this BST's key with key\n * @param {Value}    options.value Initialize this BST's data with [value]\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction _AVLTree (options) {\n  options = options || {};\n\n  this.left = null;\n  this.right = null;\n  this.parent = options.parent !== undefined ? options.parent : null;\n  if (options.hasOwnProperty('key')) { this.key = options.key; }\n  this.data = options.hasOwnProperty('value') ? [options.value] : [];\n  this.unique = options.unique || false;\n\n  this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction;\n  this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality;\n}\n\n\n/**\n * Inherit basic functions from the basic binary search tree\n */\nutil.inherits(_AVLTree, BinarySearchTree);\n\n/**\n * Keep a pointer to the internal tree constructor for testing purposes\n */\nAVLTree._AVLTree = _AVLTree;\n\n\n/**\n * Check the recorded height is correct for every node\n * Throws if one height doesn't match\n */\n_AVLTree.prototype.checkHeightCorrect = function () {\n  var leftH, rightH;\n\n  if (!this.hasOwnProperty('key')) { return; }   // Empty tree\n\n  if (this.left && this.left.height === undefined) { throw new Error(\"Undefined height for node \" + this.left.key); }\n  if (this.right && this.right.height === undefined) { throw new Error(\"Undefined height for node \" + this.right.key); }\n  if (this.height === undefined) { throw new Error(\"Undefined height for node \" + this.key); }\n\n  leftH = this.left ? this.left.height : 0;\n  rightH = this.right ? this.right.height : 0;\n\n  if (this.height !== 1 + Math.max(leftH, rightH)) { throw new Error(\"Height constraint failed for node \" + this.key); }\n  if (this.left) { this.left.checkHeightCorrect(); }\n  if (this.right) { this.right.checkHeightCorrect(); }\n};\n\n\n/**\n * Return the balance factor\n */\n_AVLTree.prototype.balanceFactor = function () {\n  var leftH = this.left ? this.left.height : 0\n    , rightH = this.right ? this.right.height : 0\n    ;\n  return leftH - rightH;\n};\n\n\n/**\n * Check that the balance factors are all between -1 and 1\n */\n_AVLTree.prototype.checkBalanceFactors = function () {\n  if (Math.abs(this.balanceFactor()) > 1) { throw new Error('Tree is unbalanced at node ' + this.key); }\n\n  if (this.left) { this.left.checkBalanceFactors(); }\n  if (this.right) { this.right.checkBalanceFactors(); }\n};\n\n\n/**\n * When checking if the BST conditions are met, also check that the heights are correct\n * and the tree is balanced\n */\n_AVLTree.prototype.checkIsAVLT = function () {\n  _AVLTree.super_.prototype.checkIsBST.call(this);\n  this.checkHeightCorrect();\n  this.checkBalanceFactors();\n};\nAVLTree.prototype.checkIsAVLT = function () { this.tree.checkIsAVLT(); };\n\n\n/**\n * Perform a right rotation of the tree if possible\n * and return the root of the resulting tree\n * The resulting tree's nodes' heights are also updated\n */\n_AVLTree.prototype.rightRotation = function () {\n  var q = this\n    , p = this.left\n    , b\n    , ah, bh, ch;\n\n  if (!p) { return this; }   // No change\n\n  b = p.right;\n\n  // Alter tree structure\n  if (q.parent) {\n    p.parent = q.parent;\n    if (q.parent.left === q) { q.parent.left = p; } else { q.parent.right = p; }\n  } else {\n    p.parent = null;\n  }\n  p.right = q;\n  q.parent = p;\n  q.left = b;\n  if (b) { b.parent = q; }\n\n  // Update heights\n  ah = p.left ? p.left.height : 0;\n  bh = b ? b.height : 0;\n  ch = q.right ? q.right.height : 0;\n  q.height = Math.max(bh, ch) + 1;\n  p.height = Math.max(ah, q.height) + 1;\n\n  return p;\n};\n\n\n/**\n * Perform a left rotation of the tree if possible\n * and return the root of the resulting tree\n * The resulting tree's nodes' heights are also updated\n */\n_AVLTree.prototype.leftRotation = function () {\n  var p = this\n    , q = this.right\n    , b\n    , ah, bh, ch;\n\n  if (!q) { return this; }   // No change\n\n  b = q.left;\n\n  // Alter tree structure\n  if (p.parent) {\n    q.parent = p.parent;\n    if (p.parent.left === p) { p.parent.left = q; } else { p.parent.right = q; }\n  } else {\n    q.parent = null;\n  }\n  q.left = p;\n  p.parent = q;\n  p.right = b;\n  if (b) { b.parent = p; }\n\n  // Update heights\n  ah = p.left ? p.left.height : 0;\n  bh = b ? b.height : 0;\n  ch = q.right ? q.right.height : 0;\n  p.height = Math.max(ah, bh) + 1;\n  q.height = Math.max(ch, p.height) + 1;\n\n  return q;\n};\n\n\n/**\n * Modify the tree if its right subtree is too small compared to the left\n * Return the new root if any\n */\n_AVLTree.prototype.rightTooSmall = function () {\n  if (this.balanceFactor() <= 1) { return this; }   // Right is not too small, don't change\n\n  if (this.left.balanceFactor() < 0) {\n    this.left.leftRotation();\n  }\n\n  return this.rightRotation();\n};\n\n\n/**\n * Modify the tree if its left subtree is too small compared to the right\n * Return the new root if any\n */\n_AVLTree.prototype.leftTooSmall = function () {\n  if (this.balanceFactor() >= -1) { return this; }   // Left is not too small, don't change\n\n  if (this.right.balanceFactor() > 0) {\n    this.right.rightRotation();\n  }\n\n  return this.leftRotation();\n};\n\n\n/**\n * Rebalance the tree along the given path. The path is given reversed (as he was calculated\n * in the insert and delete functions).\n * Returns the new root of the tree\n * Of course, the first element of the path must be the root of the tree\n */\n_AVLTree.prototype.rebalanceAlongPath = function (path) {\n  var newRoot = this\n    , rotated\n    , i;\n\n  if (!this.hasOwnProperty('key')) { delete this.height; return this; }   // Empty tree\n\n  // Rebalance the tree and update all heights\n  for (i = path.length - 1; i >= 0; i -= 1) {\n    path[i].height = 1 + Math.max(path[i].left ? path[i].left.height : 0, path[i].right ? path[i].right.height : 0);\n\n    if (path[i].balanceFactor() > 1) {\n      rotated = path[i].rightTooSmall();\n      if (i === 0) { newRoot = rotated; }\n    }\n\n    if (path[i].balanceFactor() < -1) {\n      rotated = path[i].leftTooSmall();\n      if (i === 0) { newRoot = rotated; }\n    }\n  }\n\n  return newRoot;\n};\n\n\n/**\n * Insert a key, value pair in the tree while maintaining the AVL tree height constraint\n * Return a pointer to the root node, which may have changed\n */\n_AVLTree.prototype.insert = function (key, value) {\n  var insertPath = []\n    , currentNode = this\n    ;\n\n  // Empty tree, insert as root\n  if (!this.hasOwnProperty('key')) {\n    this.key = key;\n    this.data.push(value);\n    this.height = 1;\n    return this;\n  }\n\n  // Insert new leaf at the right place\n  while (true) {\n    // Same key: no change in the tree structure\n    if (currentNode.compareKeys(currentNode.key, key) === 0) {\n      if (currentNode.unique) {\n        var err = new Error(\"Can't insert key \" + key + \", it violates the unique constraint\");\n        err.key = key;\n        err.errorType = 'uniqueViolated';\n        throw err;\n      } else {\n        currentNode.data.push(value);\n      }\n      return this;\n    }\n\n    insertPath.push(currentNode);\n\n    if (currentNode.compareKeys(key, currentNode.key) < 0) {\n      if (!currentNode.left) {\n        insertPath.push(currentNode.createLeftChild({ key: key, value: value }));\n        break;\n      } else {\n        currentNode = currentNode.left;\n      }\n    } else {\n      if (!currentNode.right) {\n        insertPath.push(currentNode.createRightChild({ key: key, value: value }));\n        break;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n  }\n\n  return this.rebalanceAlongPath(insertPath);\n};\n\n// Insert in the internal tree, update the pointer to the root if needed\nAVLTree.prototype.insert = function (key, value) {\n  var newTree = this.tree.insert(key, value);\n\n  // If newTree is undefined, that means its structure was not modified\n  if (newTree) { this.tree = newTree; }\n};\n\n\n/**\n * Delete a key or just a value and return the new root of the tree\n * @param {Key} key\n * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n */\n_AVLTree.prototype.delete = function (key, value) {\n  var newData = [], replaceWith\n    , self = this\n    , currentNode = this\n    , deletePath = []\n    ;\n\n  if (!this.hasOwnProperty('key')) { return this; }   // Empty tree\n\n  // Either no match is found and the function will return from within the loop\n  // Or a match is found and deletePath will contain the path from the root to the node to delete after the loop\n  while (true) {\n    if (currentNode.compareKeys(key, currentNode.key) === 0) { break; }\n\n    deletePath.push(currentNode);\n\n    if (currentNode.compareKeys(key, currentNode.key) < 0) {\n      if (currentNode.left) {\n        currentNode = currentNode.left;\n      } else {\n        return this;   // Key not found, no modification\n      }\n    } else {\n      // currentNode.compareKeys(key, currentNode.key) is > 0\n      if (currentNode.right) {\n        currentNode = currentNode.right;\n      } else {\n        return this;   // Key not found, no modification\n      }\n    }\n  }\n\n  // Delete only a value (no tree modification)\n  if (currentNode.data.length > 1 && value) {\n    currentNode.data.forEach(function (d) {\n      if (!currentNode.checkValueEquality(d, value)) { newData.push(d); }\n    });\n    currentNode.data = newData;\n    return this;\n  }\n\n  // Delete a whole node\n\n  // Leaf\n  if (!currentNode.left && !currentNode.right) {\n    if (currentNode === this) {   // This leaf is also the root\n      delete currentNode.key;\n      currentNode.data = [];\n      delete currentNode.height;\n      return this;\n    } else {\n      if (currentNode.parent.left === currentNode) {\n        currentNode.parent.left = null;\n      } else {\n        currentNode.parent.right = null;\n      }\n      return this.rebalanceAlongPath(deletePath);\n    }\n  }\n\n\n  // Node with only one child\n  if (!currentNode.left || !currentNode.right) {\n    replaceWith = currentNode.left ? currentNode.left : currentNode.right;\n\n    if (currentNode === this) {   // This node is also the root\n      replaceWith.parent = null;\n      return replaceWith;   // height of replaceWith is necessarily 1 because the tree was balanced before deletion\n    } else {\n      if (currentNode.parent.left === currentNode) {\n        currentNode.parent.left = replaceWith;\n        replaceWith.parent = currentNode.parent;\n      } else {\n        currentNode.parent.right = replaceWith;\n        replaceWith.parent = currentNode.parent;\n      }\n\n      return this.rebalanceAlongPath(deletePath);\n    }\n  }\n\n\n  // Node with two children\n  // Use the in-order predecessor (no need to randomize since we actively rebalance)\n  deletePath.push(currentNode);\n  replaceWith = currentNode.left;\n\n  // Special case: the in-order predecessor is right below the node to delete\n  if (!replaceWith.right) {\n    currentNode.key = replaceWith.key;\n    currentNode.data = replaceWith.data;\n    currentNode.left = replaceWith.left;\n    if (replaceWith.left) { replaceWith.left.parent = currentNode; }\n    return this.rebalanceAlongPath(deletePath);\n  }\n\n  // After this loop, replaceWith is the right-most leaf in the left subtree\n  // and deletePath the path from the root (inclusive) to replaceWith (exclusive)\n  while (true) {\n    if (replaceWith.right) {\n      deletePath.push(replaceWith);\n      replaceWith = replaceWith.right;\n    } else {\n      break;\n    }\n  }\n\n  currentNode.key = replaceWith.key;\n  currentNode.data = replaceWith.data;\n\n  replaceWith.parent.right = replaceWith.left;\n  if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n\n  return this.rebalanceAlongPath(deletePath);\n};\n\n// Delete a value\nAVLTree.prototype.delete = function (key, value) {\n  var newTree = this.tree.delete(key, value);\n\n  // If newTree is undefined, that means its structure was not modified\n  if (newTree) { this.tree = newTree; }\n};\n\n\n/**\n * Other functions we want to use on an AVLTree as if it were the internal _AVLTree\n */\n['getNumberOfKeys', 'search', 'betweenBounds', 'prettyPrint', 'executeOnEveryNode'].forEach(function (fn) {\n  AVLTree.prototype[fn] = function () {\n    return this.tree[fn].apply(this.tree, arguments);\n  };\n});\n\n\n// Interface\nmodule.exports = AVLTree;\n"},"lineCount":456}},"hash":"a2098e625cef6b70c896d3372613b243","cacheData":{"env":{}}}